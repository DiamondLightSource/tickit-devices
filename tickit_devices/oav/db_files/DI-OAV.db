# Database for the records specific to the ADAravis driver
# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout, default 1
#% macro, ADDR, Asyn Port address, default 0

# This associates a BOY screen with the template
# % gui, OAV.CAM, boydetail, aravisApp_opi/aravis_detail.opi, P=S03SIM-DI-OAV-01, R=:CAM:, DESC=Camera
# % gui, OAV.CAM, boyembed, aravisApp_opi/aravis_embed_box.opi, P=S03SIM-DI-OAV-01, R=:CAM:, DESC=Camera
# % gui, OAV.CAM, boyembed, aravisApp_opi/aravis_embed.opi, P=S03SIM-DI-OAV-01, R=:CAM:, DESC=Camera

## ADGenICam.template
## Template database file to control some features of ADGenICam.
##
## Note: this file contains only the records that are not handled by the camera-specific GenICam autogenerated database

#=================================================================#
# Template file: ADBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#  Using SCANRATE:The ImageJ EPICS_AD_Viewer plugin monitors ArrayCounter_RBV to decide
#  when there is a new image to display. That means that it will not display faster than
#  the SCANRATE you select.

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "S03SIM-DI-OAV-01:CAM:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CAM,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "S03SIM-DI-OAV-01:CAM:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CAM,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "S03SIM-DI-OAV-01:CAM:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CAM,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "S03SIM-DI-OAV-01:CAM:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CAM,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "S03SIM-DI-OAV-01:CAM:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CAM,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "S03SIM-DI-OAV-01:CAM:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CAM,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "S03SIM-DI-OAV-01:CAM:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CAM,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "S03SIM-DI-OAV-01:CAM:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CAM,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bi, "S03SIM-DI-OAV-01:CAM:Acquire") {
   field(DTYP, "asynInt32")
   field(ZNAM, "Done")
   field(VAL,  "0")
   field(FLNK, "S03SIM-DI-OAV-01:CAM:SetAcquireBusy")
   info(bi:READBACK, "1")
}

record(bi, "S03SIM-DI-OAV-01:CAM:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(OAV.CAM,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "S03SIM-DI-OAV-01:CAM:SetAcquireBusy")
{
    field(INPA, "S03SIM-DI-OAV-01:CAM:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "S03SIM-DI-OAV-01:CAM:AcquireBusy PP")
}

record(bi, "S03SIM-DI-OAV-01:CAM:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "S03SIM-DI-OAV-01:CAM:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(OAV.CAM,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "S03SIM-DI-OAV-01:CAM:ClearAcquireBusy") {
    field(INPA, "S03SIM-DI-OAV-01:CAM:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "S03SIM-DI-OAV-01:CAM:AcquireBusy PP")
}

record(bo, "S03SIM-DI-OAV-01:CAM:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(OAV.CAM,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "S03SIM-DI-OAV-01:CAM:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CAM,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "S03SIM-DI-OAV-01:CAM:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CAM,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "S03SIM-DI-OAV-01:CAM:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(OAV.CAM,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim0SA")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim0SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize0")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize0")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim0SA")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim1SA")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim1SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize1")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize1")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim1SA")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim2SA")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim2SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize2")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize2")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim2SA")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim3SA")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim3SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize3")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize3")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim3SA")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim4SA")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim4SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize4")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize4")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim4SA")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim5SA")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim5SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize5")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize5")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim5SA")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim6SA")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim6SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize6")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize6")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim6SA")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim7SA")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim7SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize7")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize7")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim7SA")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim8SA")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim8SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize8")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize8")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim8SA")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim9SA")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim9SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize9")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize9")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim9SA")
}


record(waveform, "S03SIM-DI-OAV-01:CAM:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(OAV.CAM,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim0SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize0_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize0_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim0SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim1SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim1SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize1_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize1_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim1SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim2SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim2SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize2_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize2_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim2SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim3SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim3SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize3_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize3_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim3SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim4SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim4SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize4_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize4_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim4SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim5SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim5SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize5_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize5_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim5SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim6SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim6SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize6_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize6_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim6SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim7SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim7SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize7_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize7_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim7SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim8SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim8SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize8_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize8_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim8SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:Dim9SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CAM:Dim9SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ArraySize9_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize9_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CAM:Dim9SA_RBV")
}


record(mbbi, "S03SIM-DI-OAV-01:CAM:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "S03SIM-DI-OAV-01:CAM:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CAM,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CAM:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "S03SIM-DI-OAV-01:CAM:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "S03SIM-DI-OAV-01:CAM:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "S03SIM-DI-OAV-01:CAM:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CAM,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "S03SIM-DI-OAV-01:CAM:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(OAV.CAM,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CAM:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CAM,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CAM:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CAM,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "S03SIM-DI-OAV-01:CAM:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CAM,0,1)ARRAY_COUNTER")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CAM,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "S03SIM-DI-OAV-01:CAM:ArrayRate_RBV")
{
    field(INPA, "S03SIM-DI-OAV-01:CAM:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "S03SIM-DI-OAV-01:CAM:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "S03SIM-DI-OAV-01:CAM:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "S03SIM-DI-OAV-01:CAM:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CAM,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "S03SIM-DI-OAV-01:CAM:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CAM,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "S03SIM-DI-OAV-01:CAM:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(OAV.CAM,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "S03SIM-DI-OAV-01:CAM:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(OAV.CAM,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "S03SIM-DI-OAV-01:CAM:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CAM,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "S03SIM-DI-OAV-01:CAM:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "S03SIM-DI-OAV-01:CAM:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "S03SIM-DI-OAV-01:CAM:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "S03SIM-DI-OAV-01:CAM:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "S03SIM-DI-OAV-01:CAM:PoolFreeBuffers")
}

record(longin, "S03SIM-DI-OAV-01:CAM:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "S03SIM-DI-OAV-01:CAM:PoolUsedBuffers")
}

record(calc, "S03SIM-DI-OAV-01:CAM:PoolUsedBuffers")
{
    field(INPA, "S03SIM-DI-OAV-01:CAM:PoolAllocBuffers NPP MS")
    field(INPB, "S03SIM-DI-OAV-01:CAM:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "S03SIM-DI-OAV-01:CAM:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "S03SIM-DI-OAV-01:CAM:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CAM:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)MAX_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CAM:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)MAX_SIZE_Y")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the detector readout                     #
#  including binning, region start and size                       # 
###################################################################

record(longout, "S03SIM-DI-OAV-01:CAM:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)BIN_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "S03SIM-DI-OAV-01:CAM:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)BIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:CAM:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)BIN_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "S03SIM-DI-OAV-01:CAM:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)BIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:CAM:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)MIN_X")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "S03SIM-DI-OAV-01:CAM:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)MIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:CAM:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)MIN_Y")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "S03SIM-DI-OAV-01:CAM:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)MIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:CAM:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)SIZE_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "S03SIM-DI-OAV-01:CAM:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:CAM:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)SIZE_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "S03SIM-DI-OAV-01:CAM:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(bo, "S03SIM-DI-OAV-01:CAM:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "S03SIM-DI-OAV-01:CAM:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "S03SIM-DI-OAV-01:CAM:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "S03SIM-DI-OAV-01:CAM:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the acquisition time and                 #
#  period                                                         # 
###################################################################
record(ao, "S03SIM-DI-OAV-01:CAM:AcquireTime")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(OAV.CAM,0,1)ACQ_TIME")
   field(PREC, "3")
   field(VAL,  "1.0")
   info(autosaveFields, "VAL")
}

record(ai, "S03SIM-DI-OAV-01:CAM:AcquireTime_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)ACQ_TIME")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "S03SIM-DI-OAV-01:CAM:AcquirePeriod")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(OAV.CAM,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(ai, "S03SIM-DI-OAV-01:CAM:AcquirePeriod_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ai, "S03SIM-DI-OAV-01:CAM:TimeRemaining_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)TIME_REMAINING")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the gain                                 # 
###################################################################
record(ao, "S03SIM-DI-OAV-01:CAM:Gain")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(OAV.CAM,0,1)GAIN")
   field(VAL,  "1.0")
   field(PREC, "3")
   info(autosaveFields, "VAL")
}

record(ai, "S03SIM-DI-OAV-01:CAM:Gain_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)GAIN")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the frame type                           # 
###################################################################
record(mbbo, "S03SIM-DI-OAV-01:CAM:FrameType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:FrameType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the acquisition mode                     # 
###################################################################
record(mbbo, "S03SIM-DI-OAV-01:CAM:ImageMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(VAL,  "2")
   info(autosaveFields, "VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:ImageMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the trigger mode                         # 
###################################################################
record(mbbo, "S03SIM-DI-OAV-01:CAM:TriggerMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the number of exposures and              #
#  number of images                                               # 
###################################################################
record(longout, "S03SIM-DI-OAV-01:CAM:NumExposures")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)NEXPOSURES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "S03SIM-DI-OAV-01:CAM:NumExposures_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)NEXPOSURES")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CAM:NumExposuresCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)NEXPOSURES_COUNTER")
   field(SCAN, "I/O Intr")
}
record(longout, "S03SIM-DI-OAV-01:CAM:NumImages")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)NIMAGES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "S03SIM-DI-OAV-01:CAM:NumImages_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)NIMAGES")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CAM:NumImagesCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)NIMAGES_COUNTER")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are for the detector state                       # 
###################################################################

record(mbbi, "S03SIM-DI-OAV-01:CAM:DetectorState_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CAM,0,1)STATUS")
    field(ZRST, "Idle")
    field(ZRVL, "0")
    field(ZRSV, "NO_ALARM")
    field(ONST, "Acquire")
    field(ONVL, "1")
    field(ONSV, "NO_ALARM")
    field(TWST, "Readout")
    field(TWVL, "2")
    field(TWSV, "NO_ALARM")
    field(THST, "Correct")
    field(THVL, "3")
    field(THSV, "NO_ALARM")
    field(FRST, "Saving")
    field(FRVL, "4")
    field(FRSV, "NO_ALARM")
    field(FVST, "Aborting")
    field(FVVL, "5")
    field(FVSV, "MINOR")
    field(SXST, "Error")
    field(SXVL, "6")
    field(SXSV, "MAJOR")
    field(SVST, "Waiting")
    field(SVVL, "7")
    field(SVSV, "NO_ALARM")
    field(EIST, "Initializing")
    field(EIVL, "8")
    field(EISV, "NO_ALARM")
    field(NIST, "Disconnected")
    field(NIVL, "9")
    field(NISV, "INVALID")
    field(TEST, "Aborted")
    field(TEVL, "10")
    field(TESV, "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide status information                       # 
###################################################################

# Status message.
record(waveform, "S03SIM-DI-OAV-01:CAM:StatusMessage_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(OAV.CAM,0,1)STATUS_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "S03SIM-DI-OAV-01:CAM:StringToServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(OAV.CAM,0,1)STRING_TO_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "S03SIM-DI-OAV-01:CAM:StringFromServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(OAV.CAM,0,1)STRING_FROM_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

################################################################@###
#  This record can be used to force a read of the detector status  # 
####################################################################
record(bo,"S03SIM-DI-OAV-01:CAM:ReadStatus") {
    field(DTYP,"asynInt32")
    field(OUT, "@asyn(OAV.CAM,0,1)READ_STATUS")
    field(VAL, "1")
    field(SCAN,"Passive")
    info(autosaveFields, "SCAN")
}

###################################################################
#  These records control the shutter                              # 
###################################################################

record(mbbo, "S03SIM-DI-OAV-01:CAM:ShutterMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CAM,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Detector output")
    field(TWVL, "2")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:ShutterMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CAM,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Camera output")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

record(bo, "S03SIM-DI-OAV-01:CAM:ShutterControl")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CAM,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(VAL,  "0")
}

record(bi, "S03SIM-DI-OAV-01:CAM:ShutterControl_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CAM,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(SCAN, "I/O Intr")
}

record(bi, "S03SIM-DI-OAV-01:CAM:ShutterStatus_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CAM,0,1)SHUTTER_STATUS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "S03SIM-DI-OAV-01:CAM:ShutterOpenDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(OAV.CAM,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "S03SIM-DI-OAV-01:CAM:ShutterOpenDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "S03SIM-DI-OAV-01:CAM:ShutterCloseDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(OAV.CAM,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "S03SIM-DI-OAV-01:CAM:ShutterCloseDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

# This record changes state when the driver opens/closes an EPICS shutter
record(bi, "S03SIM-DI-OAV-01:CAM:ShutterControlEPICS")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CAM,0,1)SHUTTER_CONTROL_EPICS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
    field(FLNK, "S03SIM-DI-OAV-01:CAM:ShutterFanout.PROC")
}

record(fanout, "S03SIM-DI-OAV-01:CAM:ShutterFanout")
{
    field(LNK1, "S03SIM-DI-OAV-01:CAM:ShutterOpenEPICS.PROC PP MS")
    field(LNK2, "S03SIM-DI-OAV-01:CAM:ShutterCloseEPICS.PROC PP MS")
}

record(calcout, "S03SIM-DI-OAV-01:CAM:ShutterOpenEPICS")
{
    field(INPA, "S03SIM-DI-OAV-01:CAM:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(calcout, "S03SIM-DI-OAV-01:CAM:ShutterCloseEPICS")
{
    field(INPA, "S03SIM-DI-OAV-01:CAM:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "0")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:ShutterStatusEPICS_RBV")
{
    field(DTYP, "Raw Soft Channel")
    field(INP,  "test CP MS")
    field(ZRVL, "0")
    field(ZRST, "Closed")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "Open")
    field(ONSV, "MINOR")
    info(autosaveFields, "INP ZRVL ONVL")
}

###################################################################
#  These records control the detector temperature                 # 
###################################################################
 
record(ao, "S03SIM-DI-OAV-01:CAM:Temperature")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(OAV.CAM,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(VAL,  "25.0")
   info(autosaveFields, "VAL")
}

record(ai, "S03SIM-DI-OAV-01:CAM:Temperature_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}

record(ai, "S03SIM-DI-OAV-01:CAM:TemperatureActual")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)TEMPERATURE_ACTUAL")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}


###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
## These are the records from ADBase.template that we modify

# Some cameras use both AcquisitionFrameRate and AcquirePeriod.
# Make AcquirePeriod update if FrameRate is changed.
record(ao, "S03SIM-DI-OAV-01:CAM:AcquirePeriod")
{
   info(ai:READBACK, "1")
}

# This record hides the fact that some cameras use FrameRate and some use FrameRateAbs
# This is not PINI=YES because AcquirePeriod is and they control the same thing
record(ao, "S03SIM-DI-OAV-01:CAM:FrameRate")
{
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(OAV.CAM 0)GC_FRAMERATE")
   field(PREC, "3")
}

record(ai, "S03SIM-DI-OAV-01:CAM:FrameRate_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM 0)GC_FRAMERATE")
   field(SCAN, "I/O Intr")
   field(PREC, "3")
}

# Some cameras (Basler, Point Grey, FLIR) use AcquisitionFrameRateEnable or AcquisitionFrameRateEnabled
# This record hides the fact that the feature name may differ; the record name is always the same.
record(bo, "S03SIM-DI-OAV-01:CAM:FrameRateEnable")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM 0)GC_FRAMERATE_ENABLE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "S03SIM-DI-OAV-01:CAM:FrameRateEnable_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM 0)GC_FRAMERATE_ENABLE")
   field(SCAN, "I/O Intr")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

# This record is used to ensure there is a record for TriggerSource even if there is no such GenICam feature
record(mbbo, "S03SIM-DI-OAV-01:CAM:TriggerSource")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM 0)GC_TRIGGER_SOURCE")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:TriggerSource_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM 0)GC_TRIGGER_SOURCE")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
   field(SCAN, "I/O Intr")
}

# This record is used to ensure there is a record for TriggerOverlap even if there is no such GenICam feature
record(mbbo, "S03SIM-DI-OAV-01:CAM:TriggerOverlap")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM 0)GC_TRIGGER_OVERLAP")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:TriggerOverlap_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM 0)GC_TRIGGER_OVERLAP")
   field(SCAN, "I/O Intr")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

# This record is used to ensure there is a record for TriggerSoftware even if there is no such GenICam feature
record(bo, "S03SIM-DI-OAV-01:CAM:TriggerSoftware")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM 0)GC_TRIGGER_SOFTWARE")
   field(ZNAM, "Done")
   field(ONAM, "Trigger")
}

# This record is used to ensure there is a record for ExposureMode even if there is no such GenICam feature
record(mbbo, "S03SIM-DI-OAV-01:CAM:ExposureMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM 0)GC_EXPOSURE_MODE")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:ExposureMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM 0)GC_EXPOSURE_MODE")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
   field(SCAN, "I/O Intr")
}

# This record is used to ensure there is a record for ExposureAuto even if there is no such GenICam feature
record(mbbo, "S03SIM-DI-OAV-01:CAM:ExposureAuto")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM 0)GC_EXPOSURE_AUTO")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:ExposureAuto_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM 0)GC_EXPOSURE_AUTO")
   field(SCAN, "I/O Intr")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

# This record is used to ensure there is a record for GainAuto even if there is no such GenICam feature
record(mbbo, "S03SIM-DI-OAV-01:CAM:GainAuto")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM 0)GC_GAIN_AUTO")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:GainAuto_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM 0)GC_GAIN_AUTO")
   field(SCAN, "I/O Intr")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

# This record is used to ensure there is a record for PixelFormat even if there is no such GenICam feature
record(mbbo, "S03SIM-DI-OAV-01:CAM:PixelFormat")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM 0)GC_PIXEL_FORMAT")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:PixelFormat_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM 0)GC_PIXEL_FORMAT")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
   field(SCAN, "I/O Intr")
}

record(ai, "S03SIM-DI-OAV-01:CAM:ARFramesCompleted")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)ARAVIS_COMPLETED")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC LLSV LOLO LOW LSV")
}

record(ai, "S03SIM-DI-OAV-01:CAM:ARFrameFailures")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)ARAVIS_FAILURES")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(ai, "S03SIM-DI-OAV-01:CAM:ARFrameUnderruns")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CAM,0,1)ARAVIS_UNDERRUNS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ARMissingPackets")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)ARAVIS_MISSING_PKTS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(longin, "S03SIM-DI-OAV-01:CAM:ARResentPackets")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CAM,0,1)ARAVIS_RESENT_PKTS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(mbbo, "S03SIM-DI-OAV-01:CAM:ARPacketResendEnable")
{
   field(DESC, "Packet resend enable")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)ARAVIS_PKT_RESEND")
   field(ZRST, "Never")
   field(ZRVL, "0")
   field(ONST, "Always")
   field(ONVL, "1")
   field(VAL,  "1")
   field(PINI, "1")
   info(autosaveFields, "DESC ONSV ZRSV PINI VAL")
}

record(longout, "S03SIM-DI-OAV-01:CAM:ARPacketTimeout")
{
   field(DESC, "Delay in us before packet resend request")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)ARAVIS_PKT_TIMEOUT")
   field(VAL,  "20000")
   field(EGU,  "us")
   field(PINI, "1")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL")
}

record(longout, "S03SIM-DI-OAV-01:CAM:ARFrameRetention")
{
   field(DESC, "Frame timeout in us after last packet")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)ARAVIS_FRAME_RETENTION")
   field(VAL,  "100000")
   field(EGU,  "us")
   field(PINI, "1")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL")
}

record(longout, "S03SIM-DI-OAV-01:CAM:ARResetCamera")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)ARAVIS_RESET")
   field(FLNK, "S03SIM-DI-OAV-01:CAM:ARConnectCamera")
}

record(longout, "S03SIM-DI-OAV-01:CAM:ARConnectCamera")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CAM,0,1)ARAVIS_CONNECTION")
   field(VAL, "1")
   field(PINI, "1")
}

record(calcout, "S03SIM-DI-OAV-01:CAM:ARCheckConnection")
{
   field(SCAN, "1 second")
   field(INPA, "S03SIM-DI-OAV-01:CAM:ARConnectCamera.SEVR CP")
   field(CALC, "A==0")
   field(OOPT, "When Non-zero")
   field(OUT,  "S03SIM-DI-OAV-01:CAM:ARConnectCamera.PROC PP")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:ARConvertPixelFormat_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(OAV.CAM,0,1)ARAVIS_CONVERT_PIXEL_FORMAT")
  field(ZRST, "Mono16Low")
  field(ZRVL, "0")
  field(ONST, "Mono16High")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}


## When unpacking Mono12Packed or Mono12p selects whether 16-bit output is 
## left shifted by 4 bits (Mono16High) or not (Mono16Low)
record(mbbo, "S03SIM-DI-OAV-01:CAM:ARConvertPixelFormat") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(OAV.CAM,0,1)ARAVIS_CONVERT_PIXEL_FORMAT")
  field(ZRST, "Mono16Low")
  field(ZRVL, "0")
  field(ONST, "Mono16High")
  field(ONVL, "1")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}


record(mbbi, "S03SIM-DI-OAV-01:CAM:ARShiftDir_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(OAV.CAM,0,1)ARAVIS_SHIFT_DIR")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Left")
  field(ONVL, "1")
  field(TWST, "Right")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## Select no shift, left shift, or right shift when reading data 
record(mbbo, "S03SIM-DI-OAV-01:CAM:ARShiftDir") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(OAV.CAM,0,1)ARAVIS_SHIFT_DIR")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Left")
  field(ONVL, "1")
  field(TWST, "Right")
  field(TWVL, "2")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:CAM:ARShiftBits_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(OAV.CAM,0,1)ARAVIS_SHIFT_BITS")
  field(ZRST, "1")
  field(ZRVL, "1")
  field(ONST, "2")
  field(ONVL, "2")
  field(TWST, "3")
  field(TWVL, "3")
  field(THST, "4")
  field(THVL, "4")
  field(FRST, "5")
  field(FRVL, "5")
  field(FVST, "6")
  field(FVVL, "6")
  field(SXST, "7")
  field(SXVL, "7")
  field(SVST, "8")
  field(SVVL, "8")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## Selects how many bits to shift left or right when reading data 
record(mbbo, "S03SIM-DI-OAV-01:CAM:ARShiftBits") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(OAV.CAM,0,1)ARAVIS_SHIFT_BITS")
  field(ZRST, "1")
  field(ZRVL, "1")
  field(ONST, "2")
  field(ONVL, "2")
  field(TWST, "3")
  field(TWVL, "3")
  field(THST, "4")
  field(THVL, "4")
  field(FRST, "5")
  field(FRVL, "5")
  field(FVST, "6")
  field(FVVL, "6")
  field(SXST, "7")
  field(SXVL, "7")
  field(SVST, "8")
  field(SVVL, "8")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}
# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix



# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout

#=================================================================#
# Template file: NDPluginBase.template
# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, NDARRAY_PORT, Input Array Port
# % macro, NDARRAY_ADDR, Input Array Address
# % macro, ENABLED, Plugin Enabled at startup?
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "S03SIM-DI-OAV-01:MXSC:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.MXSC,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "S03SIM-DI-OAV-01:MXSC:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.MXSC,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "S03SIM-DI-OAV-01:MXSC:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.MXSC,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "S03SIM-DI-OAV-01:MXSC:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.MXSC,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "S03SIM-DI-OAV-01:MXSC:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.MXSC,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "S03SIM-DI-OAV-01:MXSC:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.MXSC,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "S03SIM-DI-OAV-01:MXSC:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.MXSC,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "S03SIM-DI-OAV-01:MXSC:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.MXSC,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "S03SIM-DI-OAV-01:MXSC:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(OAV.MXSC,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "S03SIM-DI-OAV-01:MXSC:SetAcquireBusy")
   info(ai:READBACK, "1")
}

record(bi, "S03SIM-DI-OAV-01:MXSC:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(OAV.MXSC,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "S03SIM-DI-OAV-01:MXSC:SetAcquireBusy")
{
    field(INPA, "S03SIM-DI-OAV-01:MXSC:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "S03SIM-DI-OAV-01:MXSC:AcquireBusy PP")
}

record(bi, "S03SIM-DI-OAV-01:MXSC:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "S03SIM-DI-OAV-01:MXSC:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(OAV.MXSC,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "S03SIM-DI-OAV-01:MXSC:ClearAcquireBusy") {
    field(INPA, "S03SIM-DI-OAV-01:MXSC:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "S03SIM-DI-OAV-01:MXSC:AcquireBusy PP")
}

record(bo, "S03SIM-DI-OAV-01:MXSC:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(OAV.MXSC,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "S03SIM-DI-OAV-01:MXSC:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "S03SIM-DI-OAV-01:MXSC:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(OAV.MXSC,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim0SA")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim0SA")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize0")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize0")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim0SA")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim1SA")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim1SA")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize1")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize1")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim1SA")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim2SA")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim2SA")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize2")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize2")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim2SA")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim3SA")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim3SA")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize3")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize3")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim3SA")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim4SA")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim4SA")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize4")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize4")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim4SA")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim5SA")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim5SA")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize5")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize5")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim5SA")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim6SA")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim6SA")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize6")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize6")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim6SA")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim7SA")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim7SA")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize7")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize7")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim7SA")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim8SA")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim8SA")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize8")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize8")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim8SA")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim9SA")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim9SA")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize9")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize9")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim9SA")
}


record(waveform, "S03SIM-DI-OAV-01:MXSC:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(OAV.MXSC,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim0SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize0_RBV")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize0_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim0SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim1SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim1SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize1_RBV")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize1_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim1SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim2SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim2SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize2_RBV")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize2_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim2SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim3SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim3SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize3_RBV")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize3_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim3SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim4SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim4SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize4_RBV")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize4_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim4SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim5SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim5SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize5_RBV")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize5_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim5SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim6SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim6SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize6_RBV")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize6_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim6SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim7SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim7SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize7_RBV")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize7_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim7SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim8SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim8SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize8_RBV")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize8_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim8SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:Dim9SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:MXSC:Dim9SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:ArraySize9_RBV")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize9_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:MXSC:Dim9SA_RBV")
}


record(mbbi, "S03SIM-DI-OAV-01:MXSC:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.MXSC,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.MXSC,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.MXSC,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.MXSC,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.MXSC,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "S03SIM-DI-OAV-01:MXSC:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.MXSC,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.MXSC,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "S03SIM-DI-OAV-01:MXSC:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.MXSC,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:MXSC:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.MXSC,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "S03SIM-DI-OAV-01:MXSC:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.MXSC,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:MXSC:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.MXSC,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "S03SIM-DI-OAV-01:MXSC:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "S03SIM-DI-OAV-01:MXSC:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(OAV.MXSC,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "S03SIM-DI-OAV-01:MXSC:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)ARRAY_COUNTER")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "S03SIM-DI-OAV-01:MXSC:ArrayRate_RBV")
{
    field(INPA, "S03SIM-DI-OAV-01:MXSC:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "S03SIM-DI-OAV-01:MXSC:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "S03SIM-DI-OAV-01:MXSC:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "S03SIM-DI-OAV-01:MXSC:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "S03SIM-DI-OAV-01:MXSC:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "S03SIM-DI-OAV-01:MXSC:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(OAV.MXSC,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "S03SIM-DI-OAV-01:MXSC:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(OAV.MXSC,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "S03SIM-DI-OAV-01:MXSC:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "S03SIM-DI-OAV-01:MXSC:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.MXSC,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "S03SIM-DI-OAV-01:MXSC:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.MXSC,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "S03SIM-DI-OAV-01:MXSC:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.MXSC,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "S03SIM-DI-OAV-01:MXSC:PoolFreeBuffers")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.MXSC,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "S03SIM-DI-OAV-01:MXSC:PoolUsedBuffers")
}

record(calc, "S03SIM-DI-OAV-01:MXSC:PoolUsedBuffers")
{
    field(INPA, "S03SIM-DI-OAV-01:MXSC:PoolAllocBuffers NPP MS")
    field(INPB, "S03SIM-DI-OAV-01:MXSC:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "S03SIM-DI-OAV-01:MXSC:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.MXSC,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.MXSC,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "S03SIM-DI-OAV-01:MXSC:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.MXSC,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "S03SIM-DI-OAV-01:MXSC:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(OAV.MXSC,0,1)NDARRAY_PORT")
    field(VAL,  "OAV.CAM")
    info(autosaveFields, "VAL")
}

record(stringin, "S03SIM-DI-OAV-01:MXSC:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(OAV.MXSC,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:MXSC:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "S03SIM-DI-OAV-01:MXSC:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "S03SIM-DI-OAV-01:MXSC:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "S03SIM-DI-OAV-01:MXSC:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(OAV.MXSC,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "S03SIM-DI-OAV-01:MXSC:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(OAV.MXSC,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "S03SIM-DI-OAV-01:MXSC:MaxArrayRate")
{
    field(DTYP, "Soft Channel")
    field(OUT,  "S03SIM-DI-OAV-01:MXSC:MaxArrayRate_COUT PP")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(VAL,  "0.0")
    info(autosaveFields, "VAL")
}

record(calcout, "S03SIM-DI-OAV-01:MXSC:MaxArrayRate_COUT")
{
    field(INPA, "S03SIM-DI-OAV-01:MXSC:MaxArrayRate")
    field(CALC, "A=0?0:1.0/A")
    field(OUT,  "S03SIM-DI-OAV-01:MXSC:MinCallbackTime PP")
}

record(calc, "S03SIM-DI-OAV-01:MXSC:MaxArrayRate_RBV")
{
    field(INPA, "S03SIM-DI-OAV-01:MXSC:MinCallbackTime_RBV CP")
    field(CALC, "A=0?0:1.0/A")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(SCAN, "Passive")
}

record(ao, "S03SIM-DI-OAV-01:MXSC:MaxByteRate")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(OAV.MXSC,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "S03SIM-DI-OAV-01:MXSC:MaxByteRate_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(OAV.MXSC,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the last execution time of the plugin     #
###################################################################
record(ai, "S03SIM-DI-OAV-01:MXSC:ExecutionTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(OAV.MXSC,0,1)EXECUTION_TIME")
    field(EGU,  "ms")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record requests that the plugin execute again with the    #
#  same NDArray                                                   #
###################################################################
record(bo, "S03SIM-DI-OAV-01:MXSC:ProcessPlugin")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)PROCESS_PLUGIN")
    field(VAL,  "1")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "S03SIM-DI-OAV-01:MXSC:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "S03SIM-DI-OAV-01:MXSC:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


record(longout, "S03SIM-DI-OAV-01:MXSC:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:MXSC:QueueSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)QUEUE_SIZE")
    field(PINI, "YES")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:QueueSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)QUEUE_SIZE")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:QueueFreeLow")
    field(SCAN, "I/O Intr")
}

record(calcout, "S03SIM-DI-OAV-01:MXSC:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "S03SIM-DI-OAV-01:MXSC:QueueSize")
    field(OUT,  "S03SIM-DI-OAV-01:MXSC:QueueFree.LOW")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "S03SIM-DI-OAV-01:MXSC:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "S03SIM-DI-OAV-01:MXSC:QueueSize")
   field(OUT,  "S03SIM-DI-OAV-01:MXSC:QueueUse.HIGH")
   field(FLNK, "S03SIM-DI-OAV-01:MXSC:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "S03SIM-DI-OAV-01:MXSC:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "S03SIM-DI-OAV-01:MXSC:QueueSize")
   field(OUT,  "S03SIM-DI-OAV-01:MXSC:QueueUse.HIHI")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "S03SIM-DI-OAV-01:MXSC:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "S03SIM-DI-OAV-01:MXSC:QueueSize")
    field(INPB, "S03SIM-DI-OAV-01:MXSC:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}

record(longout, "S03SIM-DI-OAV-01:MXSC:NumThreads")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)NUM_THREADS")
    field(VAL,  "1")
    field(PINI, "YES")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:NumThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)NUM_THREADS")
    field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:MaxThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)MAX_THREADS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control output array sorting                     #
###################################################################
record(mbbo, "S03SIM-DI-OAV-01:MXSC:SortMode") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
}

record(mbbi, "S03SIM-DI-OAV-01:MXSC:SortMode_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
    field(SCAN, "I/O Intr")
}

record(ao, "S03SIM-DI-OAV-01:MXSC:SortTime") {
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(OAV.MXSC,0,1)SORT_TIME")
    field(PREC, "3")
    field(VAL, "0.1")
}

record(ai, "S03SIM-DI-OAV-01:MXSC:SortTime_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(OAV.MXSC,0,1)SORT_TIME")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:MXSC:SortSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)SORT_SIZE")
    field(VAL,  "20")
    field(PINI, "YES")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:SortSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)SORT_SIZE")
    field(FLNK, "S03SIM-DI-OAV-01:MXSC:SortFreeLow")
    field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:SortFree") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)SORT_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

record(calcout, "S03SIM-DI-OAV-01:MXSC:SortFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "S03SIM-DI-OAV-01:MXSC:SortSize")
    field(OUT,  "S03SIM-DI-OAV-01:MXSC:SortFree.LOW")
}

record(longout, "S03SIM-DI-OAV-01:MXSC:DroppedOutputArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)DROPPED_OUTPUT_ARRAYS")
    field(VAL,  "0")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:DroppedOutputArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)DROPPED_OUTPUT_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:MXSC:DisorderedArrays")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)DISORDERED_ARRAYS")
    field(PINI, "YES")
}

record(longin, "S03SIM-DI-OAV-01:MXSC:DisorderedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)DISORDERED_ARRAYS")
    field(SCAN, "I/O Intr")
}



###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 

record(ai, "S03SIM-DI-OAV-01:MXSC:Time_RBV")
{
    field(DTYP, "asynFloat64")
    field(DESC, "Time taken for plugin to run")
    field(INP,  "@asyn(OAV.MXSC,0,1)ADPYTHON_TIME")
    field(SCAN, "I/O Intr")
    field(PREC, "1")
    field(EGU,  "ms")
}

# File path.
# % autosave 2 
record(waveform, "S03SIM-DI-OAV-01:MXSC:Filename")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(OAV.MXSC,0,1)ADPYTHON_FILENAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "S03SIM-DI-OAV-01:MXSC:Filename_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(OAV.MXSC,0,1)ADPYTHON_FILENAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# Class name.
# % autosave 2 
record(waveform, "S03SIM-DI-OAV-01:MXSC:Classname")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(OAV.MXSC,0,1)ADPYTHON_CLASSNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "S03SIM-DI-OAV-01:MXSC:Classname_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(OAV.MXSC,0,1)ADPYTHON_CLASSNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# Read file
record(bi, "S03SIM-DI-OAV-01:MXSC:ReadFile")
{
    field(DTYP, "asynInt32")
    field(ZNAM, "Done")
    field(ONAM, "Read")
}

record(bi, "S03SIM-DI-OAV-01:MXSC:ReadFile_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)ADPYTHON_LOAD")
    field(ZNAM, "Done")
    field(ONAM, "Reading")
    field(SCAN, "I/O Intr")
}

record(mbbi, "S03SIM-DI-OAV-01:MXSC:PluginState_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)ADPYTHON_STATE")
    field(ZRST, "Good")
    field(ZRSV, "NO_ALARM")
    field(ZRVL, "0")
    field(ONST, "Bad")
    field(ONSV, "MAJOR")
    field(ONVL, "1")
    field(TWST, "Ugly")
    field(TWSV, "MAJOR")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

record(bo, "S03SIM-DI-OAV-01:MXSC:AbortProcessing")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)ADPYTHON_PROC_ABORT")
    field(ZNAM, "Aborted")
    field(ONAM, "Abort")
}

record(ao, "S03SIM-DI-OAV-01:MXSC:Timeout")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)ADPYTHON_PROC_TIMEOUT")
    field(EGU,  "ms")
}

record(ai, "S03SIM-DI-OAV-01:MXSC:Timeout_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)ADPYTHON_PROC_TIMEOUT")
    field(SCAN, "I/O Intr")
    field(EGU,  "ms")
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % gui, OAV.MXSC, edmtab, adPythonMxSampleDetect.edl, P=S03SIM-DI-OAV-01,R=:MXSC:


# Records relating to preprocessing.

record(mbbo, "S03SIM-DI-OAV-01:MXSC:Preprocess") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)preprocess")

    field(ZRST, "Erode")
    field(ZRVL, "0")
    field(ONST, "Dilate")
    field(ONVL, "1")
    field(TWST, "Open")
    field(TWVL, "2")
    field(THST, "Close")
    field(THVL, "3")
    field(FRST, "Gradient")
    field(FRVL, "4")
    field(FVST, "Top hat")
    field(FVVL, "5")
    field(SXST, "Black hat")
    field(SXVL, "6")
    field(SVST, "Blur")
    field(SVVL, "7")
    field(EIST, "Gaussian blur")
    field(EIVL, "8")
    field(NIST, "Median blur")
    field(NIVL, "9")
    field(TEST, "None")
    field(TEVL, "10")
}
record(mbbi, "S03SIM-DI-OAV-01:MXSC:Preprocess_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)preprocess")

    field(ZRST, "Erode")
    field(ZRVL, "0")
    field(ONST, "Dilate")
    field(ONVL, "1")
    field(TWST, "Open")
    field(TWVL, "2")
    field(THST, "Close")
    field(THVL, "3")
    field(FRST, "Gradient")
    field(FRVL, "4")
    field(FVST, "Top hat")
    field(FVVL, "5")
    field(SXST, "Black hat")
    field(SXVL, "6")
    field(SVST, "Blur")
    field(SVVL, "7")
    field(EIST, "Gaussian blur")
    field(EIVL, "8")
    field(NIST, "Median blur")
    field(NIVL, "9")
    field(TEST, "None")
    field(TEVL, "10")
}

# Abuse a couple of mbbis to provide descriptions of preprocess parameters.
record(mbbi, "S03SIM-DI-OAV-01:MXSC:PpParam1Name") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)preprocess")

    field(ZRST, "ksize (px)")
    field(ZRVL, "0")
    field(ONST, "ksize (px)")
    field(ONVL, "1")
    field(TWST, "ksize (px)")
    field(TWVL, "2")
    field(THST, "ksize (px)")
    field(THVL, "3")
    field(FRST, "ksize (px)")
    field(FRVL, "4")
    field(FVST, "ksize (px)")
    field(FVVL, "5")
    field(SXST, "ksize (px)")
    field(SXVL, "6")
    field(SVST, "ksize (px)")
    field(SVVL, "7")
    field(EIST, "ksize (px)")
    field(EIVL, "8")
    field(NIST, "ksize (px)")
    field(NIVL, "9")
    field(TEST, "(Unused)")
    field(TEVL, "10")
}
record(mbbi, "S03SIM-DI-OAV-01:MXSC:PpParam2Name") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)preprocess")

    field(ZRST, "Iterations")
    field(ZRVL, "0")
    field(ONST, "Iterations")
    field(ONVL, "1")
    field(TWST, "Iterations")
    field(TWVL, "2")
    field(THST, "Iterations")
    field(THVL, "3")
    field(FRST, "Iterations")
    field(FRVL, "4")
    field(FVST, "Iterations")
    field(FVVL, "5")
    field(SXST, "Iterations")
    field(SXVL, "6")
    field(SVST, "(Unused)")
    field(SVVL, "7")
    field(EIST, "(Unused)")
    field(EIVL, "8")
    field(NIST, "(Unused)")
    field(NIVL, "9")
    field(TEST, "(Unused)")
    field(TEVL, "10")
}

record(longout, "S03SIM-DI-OAV-01:MXSC:PpParam1") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)pp_param1")
}
record(longin, "S03SIM-DI-OAV-01:MXSC:PpParam1_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)pp_param1")
}

record(longout, "S03SIM-DI-OAV-01:MXSC:PpParam2") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)pp_param2")
}
record(longin, "S03SIM-DI-OAV-01:MXSC:PpParam2_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)pp_param2")
}


# Records relating to edge detection.

record(longout, "S03SIM-DI-OAV-01:MXSC:CannyUpper") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)canny_upper")
}
record(longin, "S03SIM-DI-OAV-01:MXSC:CannyUpper_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)canny_upper")
}

record(longout, "S03SIM-DI-OAV-01:MXSC:CannyLower") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)canny_lower")
}
record(longin, "S03SIM-DI-OAV-01:MXSC:CannyLower_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)canny_lower")
}


# Records relating to "close" morphological operation.

record(longout, "S03SIM-DI-OAV-01:MXSC:CloseKsize") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)close_ksize")
}
record(longin, "S03SIM-DI-OAV-01:MXSC:CloseKsize_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)close_ksize")
}

record(longout, "S03SIM-DI-OAV-01:MXSC:CloseIterations") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)close_iterations")
}
record(longin, "S03SIM-DI-OAV-01:MXSC:CloseIterations_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)close_iterations")
}


# Records relating to sample detection.

record(mbbo, "S03SIM-DI-OAV-01:MXSC:ScanDirection") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)scan_direction")

    field(ZRST, "Left to right")
    field(ZRVL, "1")
    field(ONST, "Right to left")
    field(ONVL, "-1")
}
record(mbbi, "S03SIM-DI-OAV-01:MXSC:ScanDirection_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)scan_direction")

    field(ZRST, "Left to right")
    field(ZRVL, "1")
    field(ONST, "Right to left")
    field(ONVL, "-1")
}

record(longout, "S03SIM-DI-OAV-01:MXSC:MinTipHeight") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)min_tip_height")
}
record(longin, "S03SIM-DI-OAV-01:MXSC:MinTipHeight_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)min_tip_height")
}


# Records relating to output.

record(longin, "S03SIM-DI-OAV-01:MXSC:TipX") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)tip_x")
}
record(longin, "S03SIM-DI-OAV-01:MXSC:TipY") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)tip_y")
}


record(waveform, "S03SIM-DI-OAV-01:MXSC:Top")
{
   field(SCAN, "I/O Intr")
   field(DTYP, "asynInt32ArrayIn")
   field(INP,  "@asyn(OAV.MXSC,0,1)top")
   field(FTVL, "LONG")
   field(NELM, "1024")
}
record(waveform, "S03SIM-DI-OAV-01:MXSC:Bottom")
{
   field(SCAN, "I/O Intr")
   field(DTYP, "asynInt32ArrayIn")
   field(INP,  "@asyn(OAV.MXSC,0,1)bottom")
   field(FTVL, "LONG")
   field(NELM, "1024")
}

record(mbbo, "S03SIM-DI-OAV-01:MXSC:OutputArray") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)out_arr")

    field(ZRST, "Original")
    field(ZRVL, "0")
    field(ONST, "Greyscale")
    field(ONVL, "1")
    field(TWST, "Preprocessed")
    field(TWVL, "2")
    field(THST, "Canny edges")
    field(THVL, "3")
    field(FRST, "Closed edges")
    field(FRVL, "4")
}
record(mbbi, "S03SIM-DI-OAV-01:MXSC:OutputArray_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)out_arr")

    field(ZRST, "Original")
    field(ZRVL, "0")
    field(ONST, "Greyscale")
    field(ONVL, "1")
    field(TWST, "Preprocessed")
    field(TWVL, "2")
    field(THST, "Canny edges")
    field(THVL, "3")
    field(FRST, "Closed edges")
    field(FRVL, "4")
}

record(bo, "S03SIM-DI-OAV-01:MXSC:DrawTip") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)draw_circle")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
}
record(bi, "S03SIM-DI-OAV-01:MXSC:DrawTip_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)draw_circle")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
}

record(bo, "S03SIM-DI-OAV-01:MXSC:DrawEdges") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)draw_edges")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
}
record(bi, "S03SIM-DI-OAV-01:MXSC:DrawEdges_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)draw_edges")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
}

record(bo, "S03SIM-DI-OAV-01:MXSC:ForceColor") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.MXSC,0,1)force_color")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}
record(bi, "S03SIM-DI-OAV-01:MXSC:ForceColor_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.MXSC,0,1)force_color")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}
#=================================================================#
# Template file: NDColorConvert.template
# Database for the ColorConvert plugin
# Mark Rivers
# December 23, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address

# This associates the template with an edm screen
# % gui, OAV.CCON, edmtab, NDColorConvert.edl, P=S03SIM-DI-OAV-01,R=:CCON:

#=================================================================#
# Template file: NDPluginBase.template
# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, NDARRAY_PORT, Input Array Port
# % macro, NDARRAY_ADDR, Input Array Address
# % macro, ENABLED, Plugin Enabled at startup?
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "S03SIM-DI-OAV-01:CCON:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CCON,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "S03SIM-DI-OAV-01:CCON:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CCON,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "S03SIM-DI-OAV-01:CCON:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CCON,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "S03SIM-DI-OAV-01:CCON:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CCON,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "S03SIM-DI-OAV-01:CCON:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CCON,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "S03SIM-DI-OAV-01:CCON:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CCON,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "S03SIM-DI-OAV-01:CCON:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CCON,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "S03SIM-DI-OAV-01:CCON:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CCON,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "S03SIM-DI-OAV-01:CCON:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(OAV.CCON,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "S03SIM-DI-OAV-01:CCON:SetAcquireBusy")
   info(ai:READBACK, "1")
}

record(bi, "S03SIM-DI-OAV-01:CCON:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(OAV.CCON,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "S03SIM-DI-OAV-01:CCON:SetAcquireBusy")
{
    field(INPA, "S03SIM-DI-OAV-01:CCON:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "S03SIM-DI-OAV-01:CCON:AcquireBusy PP")
}

record(bi, "S03SIM-DI-OAV-01:CCON:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "S03SIM-DI-OAV-01:CCON:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(OAV.CCON,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "S03SIM-DI-OAV-01:CCON:ClearAcquireBusy") {
    field(INPA, "S03SIM-DI-OAV-01:CCON:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "S03SIM-DI-OAV-01:CCON:AcquireBusy PP")
}

record(bo, "S03SIM-DI-OAV-01:CCON:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(OAV.CCON,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "S03SIM-DI-OAV-01:CCON:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "S03SIM-DI-OAV-01:CCON:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "S03SIM-DI-OAV-01:CCON:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(OAV.CCON,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim0SA")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim0SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize0")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize0")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim0SA")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim1SA")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim1SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize1")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize1")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim1SA")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim2SA")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim2SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize2")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize2")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim2SA")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim3SA")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim3SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize3")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize3")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim3SA")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim4SA")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim4SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize4")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize4")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim4SA")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim5SA")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim5SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize5")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize5")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim5SA")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim6SA")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim6SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize6")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize6")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim6SA")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim7SA")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim7SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize7")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize7")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim7SA")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim8SA")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim8SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize8")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize8")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim8SA")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim9SA")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim9SA")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize9")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize9")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim9SA")
}


record(waveform, "S03SIM-DI-OAV-01:CCON:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(OAV.CCON,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim0SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize0_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize0_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim0SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim1SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim1SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize1_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize1_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim1SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim2SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim2SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize2_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize2_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim2SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim3SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim3SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize3_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize3_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim3SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim4SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim4SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize4_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize4_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim4SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim5SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim5SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize5_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize5_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim5SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim6SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim6SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize6_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize6_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim6SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim7SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim7SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize7_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize7_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim7SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim8SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim8SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize8_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize8_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim8SA_RBV")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:Dim9SA_RBV")
}

record(subArray, "S03SIM-DI-OAV-01:CCON:Dim9SA_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:ArraySize9_RBV")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize9_RBV")
{
    field(INP,  "S03SIM-DI-OAV-01:CCON:Dim9SA_RBV")
}


record(mbbi, "S03SIM-DI-OAV-01:CCON:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "S03SIM-DI-OAV-01:CCON:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CCON,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CCON:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "S03SIM-DI-OAV-01:CCON:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CCON,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:CCON:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "S03SIM-DI-OAV-01:CCON:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CCON,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:CCON:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "S03SIM-DI-OAV-01:CCON:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "S03SIM-DI-OAV-01:CCON:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(OAV.CCON,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CCON:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CCON:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "S03SIM-DI-OAV-01:CCON:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)ARRAY_COUNTER")
}

record(longin, "S03SIM-DI-OAV-01:CCON:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "S03SIM-DI-OAV-01:CCON:ArrayRate_RBV")
{
    field(INPA, "S03SIM-DI-OAV-01:CCON:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "S03SIM-DI-OAV-01:CCON:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "S03SIM-DI-OAV-01:CCON:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "S03SIM-DI-OAV-01:CCON:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "S03SIM-DI-OAV-01:CCON:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "S03SIM-DI-OAV-01:CCON:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(OAV.CCON,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "S03SIM-DI-OAV-01:CCON:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(OAV.CCON,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "S03SIM-DI-OAV-01:CCON:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "S03SIM-DI-OAV-01:CCON:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CCON,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "S03SIM-DI-OAV-01:CCON:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(OAV.CCON,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "S03SIM-DI-OAV-01:CCON:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "S03SIM-DI-OAV-01:CCON:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "S03SIM-DI-OAV-01:CCON:PoolFreeBuffers")
}

record(longin, "S03SIM-DI-OAV-01:CCON:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "S03SIM-DI-OAV-01:CCON:PoolUsedBuffers")
}

record(calc, "S03SIM-DI-OAV-01:CCON:PoolUsedBuffers")
{
    field(INPA, "S03SIM-DI-OAV-01:CCON:PoolAllocBuffers NPP MS")
    field(INPB, "S03SIM-DI-OAV-01:CCON:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "S03SIM-DI-OAV-01:CCON:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CCON,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "S03SIM-DI-OAV-01:CCON:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "S03SIM-DI-OAV-01:CCON:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(OAV.CCON,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "S03SIM-DI-OAV-01:CCON:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(OAV.CCON,0,1)NDARRAY_PORT")
    field(VAL,  "OAV.CAM")
    info(autosaveFields, "VAL")
}

record(stringin, "S03SIM-DI-OAV-01:CCON:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(OAV.CCON,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:CCON:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(longin, "S03SIM-DI-OAV-01:CCON:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "S03SIM-DI-OAV-01:CCON:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "S03SIM-DI-OAV-01:CCON:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "S03SIM-DI-OAV-01:CCON:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(OAV.CCON,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "S03SIM-DI-OAV-01:CCON:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(OAV.CCON,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "S03SIM-DI-OAV-01:CCON:MaxArrayRate")
{
    field(DTYP, "Soft Channel")
    field(OUT,  "S03SIM-DI-OAV-01:CCON:MaxArrayRate_COUT PP")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(VAL,  "0.0")
    info(autosaveFields, "VAL")
}

record(calcout, "S03SIM-DI-OAV-01:CCON:MaxArrayRate_COUT")
{
    field(INPA, "S03SIM-DI-OAV-01:CCON:MaxArrayRate")
    field(CALC, "A=0?0:1.0/A")
    field(OUT,  "S03SIM-DI-OAV-01:CCON:MinCallbackTime PP")
}

record(calc, "S03SIM-DI-OAV-01:CCON:MaxArrayRate_RBV")
{
    field(INPA, "S03SIM-DI-OAV-01:CCON:MinCallbackTime_RBV CP")
    field(CALC, "A=0?0:1.0/A")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(SCAN, "Passive")
}

record(ao, "S03SIM-DI-OAV-01:CCON:MaxByteRate")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(OAV.CCON,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "S03SIM-DI-OAV-01:CCON:MaxByteRate_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(OAV.CCON,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the last execution time of the plugin     #
###################################################################
record(ai, "S03SIM-DI-OAV-01:CCON:ExecutionTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(OAV.CCON,0,1)EXECUTION_TIME")
    field(EGU,  "ms")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record requests that the plugin execute again with the    #
#  same NDArray                                                   #
###################################################################
record(bo, "S03SIM-DI-OAV-01:CCON:ProcessPlugin")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)PROCESS_PLUGIN")
    field(VAL,  "1")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "S03SIM-DI-OAV-01:CCON:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "S03SIM-DI-OAV-01:CCON:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


record(longout, "S03SIM-DI-OAV-01:CCON:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "S03SIM-DI-OAV-01:CCON:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:CCON:QueueSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)QUEUE_SIZE")
    field(PINI, "YES")
}

record(longin, "S03SIM-DI-OAV-01:CCON:QueueSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)QUEUE_SIZE")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:QueueFreeLow")
    field(SCAN, "I/O Intr")
}

record(calcout, "S03SIM-DI-OAV-01:CCON:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "S03SIM-DI-OAV-01:CCON:QueueSize")
    field(OUT,  "S03SIM-DI-OAV-01:CCON:QueueFree.LOW")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "S03SIM-DI-OAV-01:CCON:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "S03SIM-DI-OAV-01:CCON:QueueSize")
   field(OUT,  "S03SIM-DI-OAV-01:CCON:QueueUse.HIGH")
   field(FLNK, "S03SIM-DI-OAV-01:CCON:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "S03SIM-DI-OAV-01:CCON:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "S03SIM-DI-OAV-01:CCON:QueueSize")
   field(OUT,  "S03SIM-DI-OAV-01:CCON:QueueUse.HIHI")
}

record(longin, "S03SIM-DI-OAV-01:CCON:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "S03SIM-DI-OAV-01:CCON:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "S03SIM-DI-OAV-01:CCON:QueueSize")
    field(INPB, "S03SIM-DI-OAV-01:CCON:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}

record(longout, "S03SIM-DI-OAV-01:CCON:NumThreads")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)NUM_THREADS")
    field(VAL,  "1")
    field(PINI, "YES")
}

record(longin, "S03SIM-DI-OAV-01:CCON:NumThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)NUM_THREADS")
    field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CCON:MaxThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)MAX_THREADS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control output array sorting                     #
###################################################################
record(mbbo, "S03SIM-DI-OAV-01:CCON:SortMode") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
}

record(mbbi, "S03SIM-DI-OAV-01:CCON:SortMode_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
    field(SCAN, "I/O Intr")
}

record(ao, "S03SIM-DI-OAV-01:CCON:SortTime") {
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(OAV.CCON,0,1)SORT_TIME")
    field(PREC, "3")
    field(VAL, "0.1")
}

record(ai, "S03SIM-DI-OAV-01:CCON:SortTime_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(OAV.CCON,0,1)SORT_TIME")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:CCON:SortSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)SORT_SIZE")
    field(VAL,  "20")
    field(PINI, "YES")
}

record(longin, "S03SIM-DI-OAV-01:CCON:SortSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)SORT_SIZE")
    field(FLNK, "S03SIM-DI-OAV-01:CCON:SortFreeLow")
    field(SCAN, "I/O Intr")
}

record(longin, "S03SIM-DI-OAV-01:CCON:SortFree") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)SORT_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

record(calcout, "S03SIM-DI-OAV-01:CCON:SortFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "S03SIM-DI-OAV-01:CCON:SortSize")
    field(OUT,  "S03SIM-DI-OAV-01:CCON:SortFree.LOW")
}

record(longout, "S03SIM-DI-OAV-01:CCON:DroppedOutputArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)DROPPED_OUTPUT_ARRAYS")
    field(VAL,  "0")
}

record(longin, "S03SIM-DI-OAV-01:CCON:DroppedOutputArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)DROPPED_OUTPUT_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "S03SIM-DI-OAV-01:CCON:DisorderedArrays")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(OAV.CCON,0,1)DISORDERED_ARRAYS")
    field(PINI, "YES")
}

record(longin, "S03SIM-DI-OAV-01:CCON:DisorderedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(OAV.CCON,0,1)DISORDERED_ARRAYS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "S03SIM-DI-OAV-01:CCON:ColorModeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CCON,0,1)COLOR_MODE_OUT")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:CCON:ColorModeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)COLOR_MODE_OUT")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbo, "S03SIM-DI-OAV-01:CCON:FalseColor")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(OAV.CCON,0,1)FALSE_COLOR")
   field(ZRST, "None")
   field(ZRVL, "0")
   field(ONST, "Rainbow")
   field(ONVL, "1")
   field(TWST, "Iron")
   field(TWVL, "2")
   info(autosaveFields, "VAL")
}

record(mbbi, "S03SIM-DI-OAV-01:CCON:FalseColor_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(OAV.CCON,0,1)FALSE_COLOR")
   field(ZRST, "None")
   field(ZRVL, "0")
   field(ONST, "Rainbow")
   field(ONVL, "1")
   field(TWST, "Iron")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}
