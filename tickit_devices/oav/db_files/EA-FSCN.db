# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout, default=1
#% macro, ADDR, Asyn Port address, default=0
#% gui, FSCN1.CAM, edmtab, ADGenICam.edl, P=BL03S-EA-FSCN-01,R=:CAM:,C=AVT_Manta_G125B

record(ai, "BL03S-EA-FSCN-01:CAM:GC_FirmwareVerMajor_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_FirmwareVerMajor")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_FirmwareVerMajor") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_FirmwareVerMajor")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_FirmwareVerMinor_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_FirmwareVerMinor")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_FirmwareVerMinor") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_FirmwareVerMinor")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_FirmwareVerBuild_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_FirmwareVerBuild")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_FirmwareVerBuild") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_FirmwareVerBuild")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_SensorType_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_SensorType")
  field(ZRST, "Mono")
  field(ZRVL, "0")
  field(ONST, "Bayer")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_SensorType") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_SensorType")
  field(DOL,  "0")
  field(ZRST, "Mono")
  field(ZRVL, "0")
  field(ONST, "Bayer")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_SensorBits_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_SensorBits")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_SensorBits") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_SensorBits")
  field(DISA, "0")
}

record(stringin, "BL03S-EA-FSCN-01:CAM:GC_DeviceVendorName_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_S_DeviceVendorName")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(stringin, "BL03S-EA-FSCN-01:CAM:GC_DeviceModelName_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_S_DeviceModelName")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(stringin, "BL03S-EA-FSCN-01:CAM:GC_DevFirVersion_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_S_DeviceFirmwareVersion")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(stringin, "BL03S-EA-FSCN-01:CAM:GC_DeviceID_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_S_DeviceID")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(stringin, "BL03S-EA-FSCN-01:CAM:GC_DevicePartNumber_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_S_DevicePartNumber")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_DeviceScanType_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_DeviceScanType")
  field(ZRST, "Areascan")
  field(ZRVL, "0")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_DeviceScanType") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_DeviceScanType")
  field(DOL,  "0")
  field(ZRST, "Areascan")
  field(ZRVL, "0")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_StrBytesPerSecond_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_StreamBytesPerSecond")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_StrBytesPerSecond") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_StreamBytesPerSecond")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_BanControlMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_BandwidthControlMode")
  field(ZRST, "StreamBytesPerSe")
  field(ZRVL, "0")
  field(ONST, "SCPD")
  field(ONVL, "1")
  field(TWST, "Both")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_BanControlMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_BandwidthControlMode")
  field(DOL,  "0")
  field(ZRST, "StreamBytesPerSe")
  field(ZRVL, "0")
  field(ONST, "SCPD")
  field(ONVL, "1")
  field(TWST, "Both")
  field(TWVL, "2")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_GevSCPSPacketSize_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_GevSCPSPacketSize")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_GevSCPSPacketSize") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_GevSCPSPacketSize")
  field(DISA, "0")
}

record(bi, "BL03S-EA-FSCN-01:CAM:GC_ChunkModeActive_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_B_ChunkModeActive")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(bo, "BL03S-EA-FSCN-01:CAM:GC_ChunkModeActive") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_B_ChunkModeActive")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_PayloadSize_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_PayloadSize")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_PayloadSize") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_PayloadSize")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_NonImaPayloadSize_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_NonImagePayloadSize")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_NonImaPayloadSize") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_NonImagePayloadSize")
  field(DISA, "0")
}

record(bi, "BL03S-EA-FSCN-01:CAM:GC_StrFraRatCon_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_B_StreamFrameRateConstrain")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(bo, "BL03S-EA-FSCN-01:CAM:GC_StrFraRatCon") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_B_StreamFrameRateConstrain")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_StreamHoldEnable_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_StreamHoldEnable")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_StreamHoldEnable") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_StreamHoldEnable")
  field(DOL,  "0")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_StrHoldCapacity_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_StreamHoldCapacity")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_StrHoldCapacity") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_StreamHoldCapacity")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_GevTimTicFre_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_GevTimestampTickFrequency")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_GevTimTicFre") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_GevTimestampTickFrequency")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-01:CAM:GC_GevTimConLatch") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_C_GevTimestampControlLatch")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-01:CAM:GC_GevTimConReset") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_C_GevTimestampControlReset")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_GevTimestampValue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_GevTimestampValue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_GevTimestampValue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_GevTimestampValue")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-01:CAM:GC_AcquisitionStart") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_C_AcquisitionStart")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-01:CAM:GC_AcquisitionStop") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_C_AcquisitionStop")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-01:CAM:GC_AcquisitionAbort") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_C_AcquisitionAbort")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_AcquisitionMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_AcquisitionMode")
  field(ZRST, "Continuous")
  field(ZRVL, "1")
  field(ONST, "SingleFrame")
  field(ONVL, "2")
  field(TWST, "MultiFrame")
  field(TWVL, "3")
  field(THST, "Recorder")
  field(THVL, "4")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_AcquisitionMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_AcquisitionMode")
  field(DOL,  "1")
  field(ZRST, "Continuous")
  field(ZRVL, "1")
  field(ONST, "SingleFrame")
  field(ONVL, "2")
  field(TWST, "MultiFrame")
  field(TWVL, "3")
  field(THST, "Recorder")
  field(THVL, "4")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_AcqFrameCount_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_AcquisitionFrameCount")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_AcqFrameCount") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_AcquisitionFrameCount")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_AcqFrameRateAbs_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_AcquisitionFrameRateAbs")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_AcqFrameRateAbs") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_AcquisitionFrameRateAbs")
  field(PREC, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_AcqFrameRateLimit_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_AcquisitionFrameRateLimit")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_AcqFrameRateLimit") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_AcquisitionFrameRateLimit")
  field(PREC, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_RecPreEventCount_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_RecorderPreEventCount")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_RecPreEventCount") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_RecorderPreEventCount")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_TriggerSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_TriggerSelector")
  field(ZRST, "FrameStart")
  field(ZRVL, "0")
  field(ONST, "AcquisitionStart")
  field(ONVL, "3")
  field(TWST, "AcquisitionEnd")
  field(TWVL, "4")
  field(THST, "AcquisitionRecor")
  field(THVL, "6")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_TriggerSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_TriggerSelector")
  field(DOL,  "0")
  field(ZRST, "FrameStart")
  field(ZRVL, "0")
  field(ONST, "AcquisitionStart")
  field(ONVL, "3")
  field(TWST, "AcquisitionEnd")
  field(TWVL, "4")
  field(THST, "AcquisitionRecor")
  field(THVL, "6")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_TriggerMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_TriggerMode")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_TriggerMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_TriggerMode")
  field(DOL,  "0")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-01:CAM:GC_TriggerSoftware") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_C_TriggerSoftware")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_TriggerSource_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_TriggerSource")
  field(ZRST, "Freerun")
  field(ZRVL, "0")
  field(ONST, "Line1")
  field(ONVL, "1")
  field(TWST, "Line2")
  field(TWVL, "2")
  field(THST, "Line3")
  field(THVL, "3")
  field(FRST, "Line4")
  field(FRVL, "4")
  field(FVST, "FixedRate")
  field(FVVL, "5")
  field(SXST, "Software")
  field(SXVL, "6")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_TriggerSource") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_TriggerSource")
  field(DOL,  "0")
  field(ZRST, "Freerun")
  field(ZRVL, "0")
  field(ONST, "Line1")
  field(ONVL, "1")
  field(TWST, "Line2")
  field(TWVL, "2")
  field(THST, "Line3")
  field(THVL, "3")
  field(FRST, "Line4")
  field(FRVL, "4")
  field(FVST, "FixedRate")
  field(FVVL, "5")
  field(SXST, "Software")
  field(SXVL, "6")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_TriggerActivation_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_TriggerActivation")
  field(ZRST, "RisingEdge")
  field(ZRVL, "0")
  field(ONST, "FallingEdge")
  field(ONVL, "1")
  field(TWST, "AnyEdge")
  field(TWVL, "2")
  field(THST, "LevelHigh")
  field(THVL, "3")
  field(FRST, "LevelLow")
  field(FRVL, "4")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_TriggerActivation") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_TriggerActivation")
  field(DOL,  "0")
  field(ZRST, "RisingEdge")
  field(ZRVL, "0")
  field(ONST, "FallingEdge")
  field(ONVL, "1")
  field(TWST, "AnyEdge")
  field(TWVL, "2")
  field(THST, "LevelHigh")
  field(THVL, "3")
  field(FRST, "LevelLow")
  field(FRVL, "4")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_TriggerOverlap_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_TriggerOverlap")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "ReadOut")
  field(ONVL, "1")
  field(TWST, "PreviousFrame")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_TriggerOverlap") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_TriggerOverlap")
  field(DOL,  "0")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "ReadOut")
  field(ONVL, "1")
  field(TWST, "PreviousFrame")
  field(TWVL, "2")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_TriggerDelayAbs_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_TriggerDelayAbs")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_TriggerDelayAbs") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_TriggerDelayAbs")
  field(PREC, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_SensorWidth_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_SensorWidth")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_SensorWidth") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_SensorWidth")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_SensorHeight_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_SensorHeight")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_SensorHeight") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_SensorHeight")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_BinningHorizontal_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_BinningHorizontal")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_BinningHorizontal") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_BinningHorizontal")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_BinningVertical_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_BinningVertical")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_BinningVertical") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_BinningVertical")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_DecHorizontal_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_DecimationHorizontal")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_DecHorizontal") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_DecimationHorizontal")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_DecVertical_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_DecimationVertical")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_DecVertical") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_DecimationVertical")
  field(DISA, "0")
}

record(bi, "BL03S-EA-FSCN-01:CAM:GC_ReverseX_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_B_ReverseX")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(bo, "BL03S-EA-FSCN-01:CAM:GC_ReverseX") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_B_ReverseX")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_WidthMax_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_WidthMax")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_WidthMax") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_WidthMax")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_HeightMax_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_HeightMax")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_HeightMax") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_HeightMax")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_PixelFormat_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_PixelFormat")
  field(ZRST, "Mono8")
  field(ZRVL, "0x01080001")
  field(ONST, "Mono10")
  field(ONVL, "0x01100003")
  field(TWST, "Mono12")
  field(TWVL, "0x01100005")
  field(THST, "Mono12Packed")
  field(THVL, "0x010C0006")
  field(FRST, "Mono14")
  field(FRVL, "0x01100025")
  field(FVST, "BayerGR8")
  field(FVVL, "0x01080008")
  field(SXST, "BayerRG8")
  field(SXVL, "0x01080009")
  field(SVST, "BayerBG8")
  field(SVVL, "0x0108000B")
  field(EIST, "BayerBG10")
  field(EIVL, "0x0110000F")
  field(NIST, "BayerGR12")
  field(NIVL, "0x01100010")
  field(TEST, "BayerRG12")
  field(TEVL, "0x01100011")
  field(ELST, "BayerGR12Packed")
  field(ELVL, "0x010C002A")
  field(TVST, "BayerRG12Packed")
  field(TVVL, "0x010C002B")
  field(TTST, "RGB8Packed")
  field(TTVL, "0x02180014")
  field(FTST, "BGR8Packed")
  field(FTVL, "0x02180015")
  field(FFST, "RGBA8Packed")
  field(FFVL, "0x02200016")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_PixelFormat") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_PixelFormat")
  field(DOL,  "0x01080001")
  field(ZRST, "Mono8")
  field(ZRVL, "0x01080001")
  field(ONST, "Mono10")
  field(ONVL, "0x01100003")
  field(TWST, "Mono12")
  field(TWVL, "0x01100005")
  field(THST, "Mono12Packed")
  field(THVL, "0x010C0006")
  field(FRST, "Mono14")
  field(FRVL, "0x01100025")
  field(FVST, "BayerGR8")
  field(FVVL, "0x01080008")
  field(SXST, "BayerRG8")
  field(SXVL, "0x01080009")
  field(SVST, "BayerBG8")
  field(SVVL, "0x0108000B")
  field(EIST, "BayerBG10")
  field(EIVL, "0x0110000F")
  field(NIST, "BayerGR12")
  field(NIVL, "0x01100010")
  field(TEST, "BayerRG12")
  field(TEVL, "0x01100011")
  field(ELST, "BayerGR12Packed")
  field(ELVL, "0x010C002A")
  field(TVST, "BayerRG12Packed")
  field(TVVL, "0x010C002B")
  field(TTST, "RGB8Packed")
  field(TTVL, "0x02180014")
  field(FTST, "BGR8Packed")
  field(FTVL, "0x02180015")
  field(FFST, "RGBA8Packed")
  field(FFVL, "0x02200016")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_Width_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_Width")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_Width") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_Width")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_Height_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_Height")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_Height") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_Height")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_OffsetX_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_OffsetX")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_OffsetX") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_OffsetX")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_OffsetY_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_OffsetY")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_OffsetY") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_OffsetY")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_ImageSize_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_ImageSize")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_ImageSize") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_ImageSize")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_Gamma_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_Gamma")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_Gamma") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_Gamma")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_NirMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_NirMode")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On_HighQuality")
  field(ONVL, "1")
  field(TWST, "On_Fast")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_NirMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_NirMode")
  field(DOL,  "0")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On_HighQuality")
  field(ONVL, "1")
  field(TWST, "On_Fast")
  field(TWVL, "2")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_Hue_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_Hue")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_Hue") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_Hue")
  field(PREC, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_Saturation_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_Saturation")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_Saturation") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_Saturation")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_EdgeFilter_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_EdgeFilter")
  field(ZRST, "Smooth2")
  field(ZRVL, "14")
  field(ONST, "Smooth1")
  field(ONVL, "15")
  field(TWST, "Off")
  field(TWVL, "16")
  field(THST, "Sharpen1")
  field(THVL, "17")
  field(FRST, "Sharpen2")
  field(FRVL, "18")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_EdgeFilter") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_EdgeFilter")
  field(DOL,  "14")
  field(ZRST, "Smooth2")
  field(ZRVL, "14")
  field(ONST, "Smooth1")
  field(ONVL, "15")
  field(TWST, "Off")
  field(TWVL, "16")
  field(THST, "Sharpen1")
  field(THVL, "17")
  field(FRST, "Sharpen2")
  field(FRVL, "18")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_DSPSubregionLeft_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_DSPSubregionLeft")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_DSPSubregionLeft") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_DSPSubregionLeft")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_DSPSubregionTop_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_DSPSubregionTop")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_DSPSubregionTop") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_DSPSubregionTop")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_DSPSubregionRight_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_DSPSubregionRight")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_DSPSubregionRight") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_DSPSubregionRight")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_DSPSubBottom_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_DSPSubregionBottom")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_DSPSubBottom") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_DSPSubregionBottom")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_ExposureMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_ExposureMode")
  field(ZRST, "Timed")
  field(ZRVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_ExposureMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_ExposureMode")
  field(DOL,  "1")
  field(ZRST, "Timed")
  field(ZRVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_ExposureTimeAbs_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_ExposureTimeAbs")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_ExposureTimeAbs") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_ExposureTimeAbs")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_ExposureAuto_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_ExposureAuto")
  field(ZRST, "Off")
  field(ZRVL, "1")
  field(ONST, "Once")
  field(ONVL, "3")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(THST, "other")
  field(THVL, "4")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_ExposureAuto") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_ExposureAuto")
  field(DOL,  "1")
  field(ZRST, "Off")
  field(ZRVL, "1")
  field(ONST, "Once")
  field(ONVL, "3")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(THST, "other")
  field(THVL, "4")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_ExpAutoTarget_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureAutoTarget")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_ExpAutoTarget") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureAutoTarget")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_ExposureAutoAlg_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_ExposureAutoAlg")
  field(ZRST, "Mean")
  field(ZRVL, "0")
  field(ONST, "FitRange")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_ExposureAutoAlg") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_ExposureAutoAlg")
  field(DOL,  "0")
  field(ZRST, "Mean")
  field(ZRVL, "0")
  field(ONST, "FitRange")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_ExposureAutoMin_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureAutoMin")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_ExposureAutoMin") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureAutoMin")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_ExposureAutoMax_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureAutoMax")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_ExposureAutoMax") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureAutoMax")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_ExposureAutoRate_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureAutoRate")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_ExposureAutoRate") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureAutoRate")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_ExpAutoOutliers_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureAutoOutliers")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_ExpAutoOutliers") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureAutoOutliers")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_ExpAutoAdjustTol_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureAutoAdjustTol")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_ExpAutoAdjustTol") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureAutoAdjustTol")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_GainSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_GainSelector")
  field(ZRST, "All")
  field(ZRVL, "0")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_GainSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_GainSelector")
  field(DOL,  "0")
  field(ZRST, "All")
  field(ZRVL, "0")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_Gain_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_Gain")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_Gain") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_Gain")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_GainAuto_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_GainAuto")
  field(ZRST, "Off")
  field(ZRVL, "1")
  field(ONST, "Once")
  field(ONVL, "3")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_GainAuto") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_GainAuto")
  field(DOL,  "1")
  field(ZRST, "Off")
  field(ZRVL, "1")
  field(ONST, "Once")
  field(ONVL, "3")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_GainAutoTarget_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_GainAutoTarget")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_GainAutoTarget") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_GainAutoTarget")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_GainAutoMin_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_GainAutoMin")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_GainAutoMin") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_GainAutoMin")
  field(PREC, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_GainAutoMax_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_GainAutoMax")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_GainAutoMax") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_GainAutoMax")
  field(PREC, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_GainAutoRate_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_GainAutoRate")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_GainAutoRate") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_GainAutoRate")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_GainAutoOutliers_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_GainAutoOutliers")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_GainAutoOutliers") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_GainAutoOutliers")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_GainAutoAdjustTol_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_GainAutoAdjustTol")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_GainAutoAdjustTol") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_GainAutoAdjustTol")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_BlaLevelSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_BlackLevelSelector")
  field(ZRST, "All")
  field(ZRVL, "0")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_BlaLevelSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_BlackLevelSelector")
  field(DOL,  "0")
  field(ZRST, "All")
  field(ZRVL, "0")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_BlackLevel_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_BlackLevel")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_BlackLevel") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_BlackLevel")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_BalRatioSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_BalanceRatioSelector")
  field(ZRST, "Red")
  field(ZRVL, "0")
  field(ONST, "Blue")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_BalRatioSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_BalanceRatioSelector")
  field(DOL,  "0")
  field(ZRST, "Red")
  field(ZRVL, "0")
  field(ONST, "Blue")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_BalanceRatioAbs_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_BalanceRatioAbs")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_BalanceRatioAbs") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_BalanceRatioAbs")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_BalanceWhiteAuto_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_BalanceWhiteAuto")
  field(ZRST, "Off")
  field(ZRVL, "1")
  field(ONST, "Once")
  field(ONVL, "3")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_BalanceWhiteAuto") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_BalanceWhiteAuto")
  field(DOL,  "1")
  field(ZRST, "Off")
  field(ZRVL, "1")
  field(ONST, "Once")
  field(ONVL, "3")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_BalWhiteAutoRate_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_BalanceWhiteAutoRate")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_BalWhiteAutoRate") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_BalanceWhiteAutoRate")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_BalWhiAutAdjTol_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_BalanceWhiteAutoAdjustTol")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_BalWhiAutAdjTol") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_BalanceWhiteAutoAdjustTol")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_IrisMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_IrisMode")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Video")
  field(ONVL, "1")
  field(TWST, "VideoOpen")
  field(TWVL, "2")
  field(THST, "VideoClose")
  field(THVL, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_IrisMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_IrisMode")
  field(DOL,  "0")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Video")
  field(ONVL, "1")
  field(TWST, "VideoOpen")
  field(TWVL, "2")
  field(THST, "VideoClose")
  field(THVL, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_IrisAutoTarget_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_IrisAutoTarget")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_IrisAutoTarget") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_IrisAutoTarget")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_IrisVideoLevel_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_IrisVideoLevel")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_IrisVideoLevel") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_IrisVideoLevel")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_IrisVideoLevelMin_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_IrisVideoLevelMin")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_IrisVideoLevelMin") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_IrisVideoLevelMin")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_IrisVideoLevelMax_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_IrisVideoLevelMax")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_IrisVideoLevelMax") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_IrisVideoLevelMax")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_DefMasColEnable_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_DefectMaskColumnEnable")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Enabled")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_DefMasColEnable") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_DefectMaskColumnEnable")
  field(DOL,  "0")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Enabled")
  field(ONVL, "1")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_DefMasPixelEnable_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_DefectMaskPixelEnable")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Enabled")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_DefMasPixelEnable") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_DefectMaskPixelEnable")
  field(DOL,  "0")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Enabled")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_VsubValue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_VsubValue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_VsubValue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_VsubValue")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_ColTraSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_ColorTransformationSelector")
  field(ZRST, "RGBtoRGB")
  field(ZRVL, "0")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_ColTraSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_ColorTransformationSelector")
  field(DOL,  "0")
  field(ZRST, "RGBtoRGB")
  field(ZRVL, "0")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_ColTraMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_ColorTransformationMode")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "Manual")
  field(ONVL, "1")
  field(TWST, "Temp6500K")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_ColTraMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_ColorTransformationMode")
  field(DOL,  "0")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "Manual")
  field(ONVL, "1")
  field(TWST, "Temp6500K")
  field(TWVL, "2")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_ColTraValSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_ColorTransformationValueSelector")
  field(ZRST, "Gain00")
  field(ZRVL, "0")
  field(ONST, "Gain01")
  field(ONVL, "1")
  field(TWST, "Gain02")
  field(TWVL, "2")
  field(THST, "Gain10")
  field(THVL, "3")
  field(FRST, "Gain11")
  field(FRVL, "4")
  field(FVST, "Gain12")
  field(FVVL, "5")
  field(SXST, "Gain20")
  field(SXVL, "6")
  field(SVST, "Gain21")
  field(SVVL, "7")
  field(EIST, "Gain22")
  field(EIVL, "8")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_ColTraValSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_ColorTransformationValueSelector")
  field(DOL,  "0")
  field(ZRST, "Gain00")
  field(ZRVL, "0")
  field(ONST, "Gain01")
  field(ONVL, "1")
  field(TWST, "Gain02")
  field(TWVL, "2")
  field(THST, "Gain10")
  field(THVL, "3")
  field(FRST, "Gain11")
  field(FRVL, "4")
  field(FVST, "Gain12")
  field(FVVL, "5")
  field(SXST, "Gain20")
  field(SXVL, "6")
  field(SVST, "Gain21")
  field(SVVL, "7")
  field(EIST, "Gain22")
  field(EIVL, "8")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_ColTraValue_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_D_ColorTransformationValue")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_ColTraValue") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_D_ColorTransformationValue")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_LUTSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_LUTSelector")
  field(ZRST, "LUT1")
  field(ZRVL, "0")
  field(ONST, "LUT2")
  field(ONVL, "1")
  field(TWST, "LUT3")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_LUTSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_LUTSelector")
  field(DOL,  "0")
  field(ZRST, "LUT1")
  field(ZRVL, "0")
  field(ONST, "LUT2")
  field(ONVL, "1")
  field(TWST, "LUT3")
  field(TWVL, "2")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_LUTMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_LUTMode")
  field(ZRST, "Luminance")
  field(ZRVL, "0")
  field(ONST, "Red")
  field(ONVL, "1")
  field(TWST, "Green")
  field(TWVL, "2")
  field(THST, "Blue")
  field(THVL, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_LUTMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_LUTMode")
  field(DOL,  "0")
  field(ZRST, "Luminance")
  field(ZRVL, "0")
  field(ONST, "Red")
  field(ONVL, "1")
  field(TWST, "Green")
  field(TWVL, "2")
  field(THST, "Blue")
  field(THVL, "3")
  field(DISA, "0")
}

record(bi, "BL03S-EA-FSCN-01:CAM:GC_LUTEnable_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_B_LUTEnable")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(bo, "BL03S-EA-FSCN-01:CAM:GC_LUTEnable") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_B_LUTEnable")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_LUTIndex_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_LUTIndex")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_LUTIndex") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_LUTIndex")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_LUTValue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_LUTValue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_LUTValue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_LUTValue")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-01:CAM:GC_LUTLoad") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_C_LUTLoad")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-01:CAM:GC_LUTSave") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_C_LUTSave")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_LUTBitDepthIn_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_LUTBitDepthIn")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_LUTBitDepthIn") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_LUTBitDepthIn")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_LUTBitDepthOut_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_LUTBitDepthOut")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_LUTBitDepthOut") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_LUTBitDepthOut")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_LUTAddress_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_LUTAddress")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_LUTAddress") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_LUTAddress")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_LUTSizeBytes_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_LUTSizeBytes")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_LUTSizeBytes") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_LUTSizeBytes")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_SyncInLevels_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_SyncInLevels")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_SyncInLevels") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_SyncInLevels")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_SyncInSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_SyncInSelector")
  field(ZRST, "SyncIn1")
  field(ZRVL, "0")
  field(ONST, "SyncIn2")
  field(ONVL, "1")
  field(TWST, "SyncIn3")
  field(TWVL, "2")
  field(THST, "SyncIn4")
  field(THVL, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_SyncInSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_SyncInSelector")
  field(DOL,  "0")
  field(ZRST, "SyncIn1")
  field(ZRVL, "0")
  field(ONST, "SyncIn2")
  field(ONVL, "1")
  field(TWST, "SyncIn3")
  field(TWVL, "2")
  field(THST, "SyncIn4")
  field(THVL, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_SynInGlitchFilter_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_SyncInGlitchFilter")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_SynInGlitchFilter") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_SyncInGlitchFilter")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_SyncOutLevels_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_SyncOutLevels")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_SyncOutLevels") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_SyncOutLevels")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_SyncOutSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_SyncOutSelector")
  field(ZRST, "SyncOut1")
  field(ZRVL, "0")
  field(ONST, "SyncOut2")
  field(ONVL, "1")
  field(TWST, "SyncOut3")
  field(TWVL, "2")
  field(THST, "SyncOut4")
  field(THVL, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_SyncOutSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_SyncOutSelector")
  field(DOL,  "0")
  field(ZRST, "SyncOut1")
  field(ZRVL, "0")
  field(ONST, "SyncOut2")
  field(ONVL, "1")
  field(TWST, "SyncOut3")
  field(TWVL, "2")
  field(THST, "SyncOut4")
  field(THVL, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_SyncOutSource_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_SyncOutSource")
  field(ZRST, "GPO")
  field(ZRVL, "0")
  field(ONST, "AcquisitionTrigg")
  field(ONVL, "1")
  field(TWST, "FrameTriggerRead")
  field(TWVL, "2")
  field(THST, "FrameTrigger")
  field(THVL, "3")
  field(FRST, "Exposing")
  field(FRVL, "4")
  field(FVST, "FrameReadout")
  field(FVVL, "5")
  field(SXST, "Imaging")
  field(SXVL, "6")
  field(SVST, "Acquiring")
  field(SVVL, "7")
  field(EIST, "LineIn1")
  field(EIVL, "8")
  field(NIST, "LineIn2")
  field(NIVL, "9")
  field(TEST, "Strobe1")
  field(TEVL, "12")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_SyncOutSource") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_SyncOutSource")
  field(DOL,  "0")
  field(ZRST, "GPO")
  field(ZRVL, "0")
  field(ONST, "AcquisitionTrigg")
  field(ONVL, "1")
  field(TWST, "FrameTriggerRead")
  field(TWVL, "2")
  field(THST, "FrameTrigger")
  field(THVL, "3")
  field(FRST, "Exposing")
  field(FRVL, "4")
  field(FVST, "FrameReadout")
  field(FVVL, "5")
  field(SXST, "Imaging")
  field(SXVL, "6")
  field(SVST, "Acquiring")
  field(SVVL, "7")
  field(EIST, "LineIn1")
  field(EIVL, "8")
  field(NIST, "LineIn2")
  field(NIVL, "9")
  field(TEST, "Strobe1")
  field(TEVL, "12")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_SyncOutPolarity_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_SyncOutPolarity")
  field(ZRST, "Normal")
  field(ZRVL, "0")
  field(ONST, "Invert")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_SyncOutPolarity") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_SyncOutPolarity")
  field(DOL,  "0")
  field(ZRST, "Normal")
  field(ZRVL, "0")
  field(ONST, "Invert")
  field(ONVL, "1")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_StrobeSource_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_StrobeSource")
  field(ZRST, "AcquisitionTrigg")
  field(ZRVL, "1")
  field(ONST, "FrameTriggerRead")
  field(ONVL, "2")
  field(TWST, "FrameTrigger")
  field(TWVL, "3")
  field(THST, "Exposing")
  field(THVL, "4")
  field(FRST, "FrameReadout")
  field(FRVL, "5")
  field(FVST, "Acquiring")
  field(FVVL, "7")
  field(SXST, "LineIn1")
  field(SXVL, "8")
  field(SVST, "LineIn2")
  field(SVVL, "9")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_StrobeSource") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_StrobeSource")
  field(DOL,  "1")
  field(ZRST, "AcquisitionTrigg")
  field(ZRVL, "1")
  field(ONST, "FrameTriggerRead")
  field(ONVL, "2")
  field(TWST, "FrameTrigger")
  field(TWVL, "3")
  field(THST, "Exposing")
  field(THVL, "4")
  field(FRST, "FrameReadout")
  field(FRVL, "5")
  field(FVST, "Acquiring")
  field(FVVL, "7")
  field(SXST, "LineIn1")
  field(SXVL, "8")
  field(SVST, "LineIn2")
  field(SVVL, "9")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_StrDurationMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_StrobeDurationMode")
  field(ZRST, "Source")
  field(ZRVL, "0")
  field(ONST, "Controlled")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_StrDurationMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_StrobeDurationMode")
  field(DOL,  "0")
  field(ZRST, "Source")
  field(ZRVL, "0")
  field(ONST, "Controlled")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_StrobeDelay_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_StrobeDelay")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_StrobeDelay") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_StrobeDelay")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_StrobeDuration_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_StrobeDuration")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_StrobeDuration") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_StrobeDuration")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_EventSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_EventSelector")
  field(ZRST, "AcquisitionStart")
  field(ZRVL, "40000")
  field(ONST, "AcquisitionEnd")
  field(ONVL, "40001")
  field(TWST, "FrameTrigger")
  field(TWVL, "40002")
  field(THST, "ExposureEnd")
  field(THVL, "40003")
  field(FRST, "AcquisitionRecor")
  field(FRVL, "40004")
  field(FVST, "Line1RisingEdge")
  field(FVVL, "40010")
  field(SXST, "Line1FallingEdge")
  field(SXVL, "40011")
  field(SVST, "Line2RisingEdge")
  field(SVVL, "40012")
  field(EIST, "Line2FallingEdge")
  field(EIVL, "40013")
  field(NIST, "Line3RisingEdge")
  field(NIVL, "40014")
  field(TEST, "Line3FallingEdge")
  field(TEVL, "40015")
  field(ELST, "Line4RisingEdge")
  field(ELVL, "40016")
  field(TVST, "Line4FallingEdge")
  field(TVVL, "40017")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_EventSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_EventSelector")
  field(DOL,  "40000")
  field(ZRST, "AcquisitionStart")
  field(ZRVL, "40000")
  field(ONST, "AcquisitionEnd")
  field(ONVL, "40001")
  field(TWST, "FrameTrigger")
  field(TWVL, "40002")
  field(THST, "ExposureEnd")
  field(THVL, "40003")
  field(FRST, "AcquisitionRecor")
  field(FRVL, "40004")
  field(FVST, "Line1RisingEdge")
  field(FVVL, "40010")
  field(SXST, "Line1FallingEdge")
  field(SXVL, "40011")
  field(SVST, "Line2RisingEdge")
  field(SVVL, "40012")
  field(EIST, "Line2FallingEdge")
  field(EIVL, "40013")
  field(NIST, "Line3RisingEdge")
  field(NIVL, "40014")
  field(TEST, "Line3FallingEdge")
  field(TEVL, "40015")
  field(ELST, "Line4RisingEdge")
  field(ELVL, "40016")
  field(TVST, "Line4FallingEdge")
  field(TVVL, "40017")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_EventNotification_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_EventNotification")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_EventNotification") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_EventNotification")
  field(DOL,  "0")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EventsEnable1_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventsEnable1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EventsEnable1") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventsEnable1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EveAcqStart_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventAcquisitionStart")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EveAcqStart") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventAcquisitionStart")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EveAcquisitionEnd_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventAcquisitionEnd")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EveAcquisitionEnd") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventAcquisitionEnd")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EventFrameTrigger_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventFrameTrigger")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EventFrameTrigger") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventFrameTrigger")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EventExposureEnd_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventExposureEnd")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EventExposureEnd") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventExposureEnd")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EveAcqRecTrigger_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventAcquisitionRecordTrigger")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EveAcqRecTrigger") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventAcquisitionRecordTrigger")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EveLinRisingEdge_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine1RisingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EveLinRisingEdge") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine1RisingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EveLinFallingEdge_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine1FallingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EveLinFallingEdge") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine1FallingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EveLinRisingEdg0_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine2RisingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EveLinRisingEdg0") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine2RisingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EveLinFallingEdg0_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine2FallingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EveLinFallingEdg0") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine2FallingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EveLinRisingEdg1_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine3RisingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EveLinRisingEdg1") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine3RisingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EveLinFallingEdg1_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine3FallingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EveLinFallingEdg1") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine3FallingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EveLinRisingEdg2_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine4RisingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EveLinRisingEdg2") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine4RisingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EveLinFallingEdg2_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine4FallingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EveLinFallingEdg2") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventLine4FallingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EventOverflow_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventOverflow")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EventOverflow") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventOverflow")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_EventError_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_EventError")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_EventError") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_EventError")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_UserSetSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_UserSetSelector")
  field(ZRST, "Default")
  field(ZRVL, "0")
  field(ONST, "UserSet1")
  field(ONVL, "1")
  field(TWST, "UserSet2")
  field(TWVL, "2")
  field(THST, "UserSet3")
  field(THVL, "3")
  field(FRST, "UserSet4")
  field(FRVL, "4")
  field(FVST, "UserSet5")
  field(FVVL, "5")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_UserSetSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_UserSetSelector")
  field(DOL,  "0")
  field(ZRST, "Default")
  field(ZRVL, "0")
  field(ONST, "UserSet1")
  field(ONVL, "1")
  field(TWST, "UserSet2")
  field(TWVL, "2")
  field(THST, "UserSet3")
  field(THVL, "3")
  field(FRST, "UserSet4")
  field(FRVL, "4")
  field(FVST, "UserSet5")
  field(FVVL, "5")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-01:CAM:GC_UserSetLoad") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_C_UserSetLoad")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-01:CAM:GC_UserSetSave") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_C_UserSetSave")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_UseSetDefSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_UserSetDefaultSelector")
  field(ZRST, "Default")
  field(ZRVL, "0")
  field(ONST, "UserSet1")
  field(ONVL, "1")
  field(TWST, "UserSet2")
  field(TWVL, "2")
  field(THST, "UserSet3")
  field(THVL, "3")
  field(FRST, "UserSet4")
  field(FRVL, "4")
  field(FVST, "UserSet5")
  field(FVVL, "5")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_UseSetDefSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_UserSetDefaultSelector")
  field(DOL,  "0")
  field(ZRST, "Default")
  field(ZRVL, "0")
  field(ONST, "UserSet1")
  field(ONVL, "1")
  field(TWST, "UserSet2")
  field(TWVL, "2")
  field(THST, "UserSet3")
  field(THVL, "3")
  field(FRST, "UserSet4")
  field(FRVL, "4")
  field(FVST, "UserSet5")
  field(FVVL, "5")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_LensVoltage_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_LensVoltage")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_LensVoltage") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_LensVoltage")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_LenVoltageControl_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_LensVoltageControl")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_LenVoltageControl") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_LensVoltageControl")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_LensDriveCommand_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_LensDriveCommand")
  field(ZRST, "Stop")
  field(ZRVL, "0")
  field(ONST, "IrisTimedOpen")
  field(ONVL, "1")
  field(TWST, "IrisTimedClose")
  field(TWVL, "2")
  field(THST, "FocusTimedNear")
  field(THVL, "3")
  field(FRST, "FocusTimedFar")
  field(FRVL, "4")
  field(FVST, "ZoomTimedIn")
  field(FVVL, "5")
  field(SXST, "ZoomTimedOut")
  field(SXVL, "6")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_LensDriveCommand") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_LensDriveCommand")
  field(DOL,  "0")
  field(ZRST, "Stop")
  field(ZRVL, "0")
  field(ONST, "IrisTimedOpen")
  field(ONVL, "1")
  field(TWST, "IrisTimedClose")
  field(TWVL, "2")
  field(THST, "FocusTimedNear")
  field(THVL, "3")
  field(FRST, "FocusTimedFar")
  field(FRVL, "4")
  field(FVST, "ZoomTimedIn")
  field(FVVL, "5")
  field(SXST, "ZoomTimedOut")
  field(SXVL, "6")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_LensDriveDuration_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_LensDriveDuration")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_LensDriveDuration") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_LensDriveDuration")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_PvDumTriSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_PvDummyTriggerSelector")
  field(ZRST, "FrameStart")
  field(ZRVL, "0")
  field(ONST, "AcquisitionStart")
  field(ONVL, "3")
  field(TWST, "AcquisitionEnd")
  field(TWVL, "4")
  field(THST, "AcquisitionRecor")
  field(THVL, "6")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_PvDumTriSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_PvDummyTriggerSelector")
  field(DOL,  "0")
  field(ZRST, "FrameStart")
  field(ZRVL, "0")
  field(ONST, "AcquisitionStart")
  field(ONVL, "3")
  field(TWST, "AcquisitionEnd")
  field(TWVL, "4")
  field(THST, "AcquisitionRecor")
  field(THVL, "6")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_PvDumFraStaTriMod_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_PvDummyFrameStartTriggerMode")
  field(ZRST, "Freerun")
  field(ZRVL, "2147483648")
  field(ONST, "SyncIn1")
  field(ONVL, "2147483649")
  field(TWST, "SyncIn2")
  field(TWVL, "2147483650")
  field(THST, "SyncIn3")
  field(THVL, "2147483651")
  field(FRST, "SyncIn4")
  field(FRVL, "2147483652")
  field(FVST, "FixedRate")
  field(FVVL, "2147483653")
  field(SXST, "Software")
  field(SXVL, "2147483654")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_PvDumFraStaTriMod") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_PvDummyFrameStartTriggerMode")
  field(DOL,  "2147483648")
  field(ZRST, "Freerun")
  field(ZRVL, "2147483648")
  field(ONST, "SyncIn1")
  field(ONVL, "2147483649")
  field(TWST, "SyncIn2")
  field(TWVL, "2147483650")
  field(THST, "SyncIn3")
  field(THVL, "2147483651")
  field(FRST, "SyncIn4")
  field(FRVL, "2147483652")
  field(FVST, "FixedRate")
  field(FVVL, "2147483653")
  field(SXST, "Software")
  field(SXVL, "2147483654")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_PvDumTriggerMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_E_PvDummyTriggerMode")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "SyncIn1")
  field(ONVL, "2147483649")
  field(TWST, "SyncIn2")
  field(TWVL, "2147483650")
  field(THST, "SyncIn3")
  field(THVL, "2147483651")
  field(FRST, "SyncIn4")
  field(FRVL, "2147483652")
  field(FVST, "FixedRate")
  field(FVVL, "2147483653")
  field(SXST, "Software")
  field(SXVL, "2147483654")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_PvDumTriggerMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_E_PvDummyTriggerMode")
  field(DOL,  "0")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "SyncIn1")
  field(ONVL, "2147483649")
  field(TWST, "SyncIn2")
  field(TWVL, "2147483650")
  field(THST, "SyncIn3")
  field(THVL, "2147483651")
  field(FRST, "SyncIn4")
  field(FRVL, "2147483652")
  field(FVST, "FixedRate")
  field(FVVL, "2147483653")
  field(SXST, "Software")
  field(SXVL, "2147483654")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_FraStaTriDelay_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_FrameStartTriggerDelay")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_FraStaTriDelay") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_FrameStartTriggerDelay")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_ExposureValue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureValue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_ExposureValue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_ExposureValue")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_TimeStampValueLo_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_TimeStampValueLo")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_TimeStampValueLo") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_TimeStampValueLo")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_TimeStampValueHi_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_TimeStampValueHi")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_TimeStampValueHi") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_TimeStampValueHi")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_WhitebalValueRed_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_WhitebalValueRed")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_WhitebalValueRed") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_WhitebalValueRed")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_WhitebalValueBlue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_WhitebalValueBlue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_WhitebalValueBlue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_WhitebalValueBlue")
  field(DISA, "0")
}

record(stringin, "BL03S-EA-FSCN-01:CAM:GC_ModelName_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_S_ModelName")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_GainValue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_GainValue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_GainValue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_GainValue")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_PvGainAutoMin_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_PvGainAutoMin")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_PvGainAutoMin") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_PvGainAutoMin")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_PvGainAutoMax_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_PvGainAutoMax")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_PvGainAutoMax") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_PvGainAutoMax")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_OffsetValue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN1.CAM,0,1)GC_I_OffsetValue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_OffsetValue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)GC_I_OffsetValue")
  field(DISA, "0")
}

# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout, default=1
#% macro, ADDR, Asyn Port address, default=0
#% gui, FSCN2.CAM, edmtab, ADGenICam.edl, P=BL03S-EA-FSCN-02,R=:CAM:,C=AVT_Manta_G125B

record(ai, "BL03S-EA-FSCN-02:CAM:GC_FirmwareVerMajor_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_FirmwareVerMajor")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_FirmwareVerMajor") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_FirmwareVerMajor")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_FirmwareVerMinor_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_FirmwareVerMinor")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_FirmwareVerMinor") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_FirmwareVerMinor")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_FirmwareVerBuild_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_FirmwareVerBuild")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_FirmwareVerBuild") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_FirmwareVerBuild")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_SensorType_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_SensorType")
  field(ZRST, "Mono")
  field(ZRVL, "0")
  field(ONST, "Bayer")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_SensorType") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_SensorType")
  field(DOL,  "0")
  field(ZRST, "Mono")
  field(ZRVL, "0")
  field(ONST, "Bayer")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_SensorBits_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_SensorBits")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_SensorBits") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_SensorBits")
  field(DISA, "0")
}

record(stringin, "BL03S-EA-FSCN-02:CAM:GC_DeviceVendorName_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_S_DeviceVendorName")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(stringin, "BL03S-EA-FSCN-02:CAM:GC_DeviceModelName_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_S_DeviceModelName")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(stringin, "BL03S-EA-FSCN-02:CAM:GC_DevFirVersion_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_S_DeviceFirmwareVersion")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(stringin, "BL03S-EA-FSCN-02:CAM:GC_DeviceID_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_S_DeviceID")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(stringin, "BL03S-EA-FSCN-02:CAM:GC_DevicePartNumber_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_S_DevicePartNumber")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_DeviceScanType_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_DeviceScanType")
  field(ZRST, "Areascan")
  field(ZRVL, "0")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_DeviceScanType") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_DeviceScanType")
  field(DOL,  "0")
  field(ZRST, "Areascan")
  field(ZRVL, "0")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_StrBytesPerSecond_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_StreamBytesPerSecond")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_StrBytesPerSecond") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_StreamBytesPerSecond")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_BanControlMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_BandwidthControlMode")
  field(ZRST, "StreamBytesPerSe")
  field(ZRVL, "0")
  field(ONST, "SCPD")
  field(ONVL, "1")
  field(TWST, "Both")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_BanControlMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_BandwidthControlMode")
  field(DOL,  "0")
  field(ZRST, "StreamBytesPerSe")
  field(ZRVL, "0")
  field(ONST, "SCPD")
  field(ONVL, "1")
  field(TWST, "Both")
  field(TWVL, "2")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_GevSCPSPacketSize_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_GevSCPSPacketSize")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_GevSCPSPacketSize") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_GevSCPSPacketSize")
  field(DISA, "0")
}

record(bi, "BL03S-EA-FSCN-02:CAM:GC_ChunkModeActive_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_B_ChunkModeActive")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(bo, "BL03S-EA-FSCN-02:CAM:GC_ChunkModeActive") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_B_ChunkModeActive")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_PayloadSize_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_PayloadSize")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_PayloadSize") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_PayloadSize")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_NonImaPayloadSize_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_NonImagePayloadSize")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_NonImaPayloadSize") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_NonImagePayloadSize")
  field(DISA, "0")
}

record(bi, "BL03S-EA-FSCN-02:CAM:GC_StrFraRatCon_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_B_StreamFrameRateConstrain")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(bo, "BL03S-EA-FSCN-02:CAM:GC_StrFraRatCon") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_B_StreamFrameRateConstrain")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_StreamHoldEnable_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_StreamHoldEnable")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_StreamHoldEnable") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_StreamHoldEnable")
  field(DOL,  "0")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_StrHoldCapacity_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_StreamHoldCapacity")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_StrHoldCapacity") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_StreamHoldCapacity")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_GevTimTicFre_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_GevTimestampTickFrequency")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_GevTimTicFre") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_GevTimestampTickFrequency")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-02:CAM:GC_GevTimConLatch") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_C_GevTimestampControlLatch")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-02:CAM:GC_GevTimConReset") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_C_GevTimestampControlReset")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_GevTimestampValue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_GevTimestampValue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_GevTimestampValue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_GevTimestampValue")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-02:CAM:GC_AcquisitionStart") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_C_AcquisitionStart")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-02:CAM:GC_AcquisitionStop") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_C_AcquisitionStop")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-02:CAM:GC_AcquisitionAbort") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_C_AcquisitionAbort")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_AcquisitionMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_AcquisitionMode")
  field(ZRST, "Continuous")
  field(ZRVL, "1")
  field(ONST, "SingleFrame")
  field(ONVL, "2")
  field(TWST, "MultiFrame")
  field(TWVL, "3")
  field(THST, "Recorder")
  field(THVL, "4")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_AcquisitionMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_AcquisitionMode")
  field(DOL,  "1")
  field(ZRST, "Continuous")
  field(ZRVL, "1")
  field(ONST, "SingleFrame")
  field(ONVL, "2")
  field(TWST, "MultiFrame")
  field(TWVL, "3")
  field(THST, "Recorder")
  field(THVL, "4")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_AcqFrameCount_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_AcquisitionFrameCount")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_AcqFrameCount") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_AcquisitionFrameCount")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_AcqFrameRateAbs_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_AcquisitionFrameRateAbs")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_AcqFrameRateAbs") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_AcquisitionFrameRateAbs")
  field(PREC, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_AcqFrameRateLimit_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_AcquisitionFrameRateLimit")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_AcqFrameRateLimit") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_AcquisitionFrameRateLimit")
  field(PREC, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_RecPreEventCount_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_RecorderPreEventCount")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_RecPreEventCount") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_RecorderPreEventCount")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_TriggerSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_TriggerSelector")
  field(ZRST, "FrameStart")
  field(ZRVL, "0")
  field(ONST, "AcquisitionStart")
  field(ONVL, "3")
  field(TWST, "AcquisitionEnd")
  field(TWVL, "4")
  field(THST, "AcquisitionRecor")
  field(THVL, "6")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_TriggerSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_TriggerSelector")
  field(DOL,  "0")
  field(ZRST, "FrameStart")
  field(ZRVL, "0")
  field(ONST, "AcquisitionStart")
  field(ONVL, "3")
  field(TWST, "AcquisitionEnd")
  field(TWVL, "4")
  field(THST, "AcquisitionRecor")
  field(THVL, "6")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_TriggerMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_TriggerMode")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_TriggerMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_TriggerMode")
  field(DOL,  "0")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-02:CAM:GC_TriggerSoftware") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_C_TriggerSoftware")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_TriggerSource_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_TriggerSource")
  field(ZRST, "Freerun")
  field(ZRVL, "0")
  field(ONST, "Line1")
  field(ONVL, "1")
  field(TWST, "Line2")
  field(TWVL, "2")
  field(THST, "Line3")
  field(THVL, "3")
  field(FRST, "Line4")
  field(FRVL, "4")
  field(FVST, "FixedRate")
  field(FVVL, "5")
  field(SXST, "Software")
  field(SXVL, "6")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_TriggerSource") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_TriggerSource")
  field(DOL,  "0")
  field(ZRST, "Freerun")
  field(ZRVL, "0")
  field(ONST, "Line1")
  field(ONVL, "1")
  field(TWST, "Line2")
  field(TWVL, "2")
  field(THST, "Line3")
  field(THVL, "3")
  field(FRST, "Line4")
  field(FRVL, "4")
  field(FVST, "FixedRate")
  field(FVVL, "5")
  field(SXST, "Software")
  field(SXVL, "6")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_TriggerActivation_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_TriggerActivation")
  field(ZRST, "RisingEdge")
  field(ZRVL, "0")
  field(ONST, "FallingEdge")
  field(ONVL, "1")
  field(TWST, "AnyEdge")
  field(TWVL, "2")
  field(THST, "LevelHigh")
  field(THVL, "3")
  field(FRST, "LevelLow")
  field(FRVL, "4")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_TriggerActivation") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_TriggerActivation")
  field(DOL,  "0")
  field(ZRST, "RisingEdge")
  field(ZRVL, "0")
  field(ONST, "FallingEdge")
  field(ONVL, "1")
  field(TWST, "AnyEdge")
  field(TWVL, "2")
  field(THST, "LevelHigh")
  field(THVL, "3")
  field(FRST, "LevelLow")
  field(FRVL, "4")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_TriggerOverlap_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_TriggerOverlap")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "ReadOut")
  field(ONVL, "1")
  field(TWST, "PreviousFrame")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_TriggerOverlap") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_TriggerOverlap")
  field(DOL,  "0")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "ReadOut")
  field(ONVL, "1")
  field(TWST, "PreviousFrame")
  field(TWVL, "2")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_TriggerDelayAbs_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_TriggerDelayAbs")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_TriggerDelayAbs") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_TriggerDelayAbs")
  field(PREC, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_SensorWidth_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_SensorWidth")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_SensorWidth") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_SensorWidth")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_SensorHeight_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_SensorHeight")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_SensorHeight") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_SensorHeight")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_BinningHorizontal_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_BinningHorizontal")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_BinningHorizontal") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_BinningHorizontal")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_BinningVertical_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_BinningVertical")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_BinningVertical") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_BinningVertical")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_DecHorizontal_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_DecimationHorizontal")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_DecHorizontal") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_DecimationHorizontal")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_DecVertical_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_DecimationVertical")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_DecVertical") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_DecimationVertical")
  field(DISA, "0")
}

record(bi, "BL03S-EA-FSCN-02:CAM:GC_ReverseX_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_B_ReverseX")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(bo, "BL03S-EA-FSCN-02:CAM:GC_ReverseX") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_B_ReverseX")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_WidthMax_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_WidthMax")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_WidthMax") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_WidthMax")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_HeightMax_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_HeightMax")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_HeightMax") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_HeightMax")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_PixelFormat_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_PixelFormat")
  field(ZRST, "Mono8")
  field(ZRVL, "0x01080001")
  field(ONST, "Mono10")
  field(ONVL, "0x01100003")
  field(TWST, "Mono12")
  field(TWVL, "0x01100005")
  field(THST, "Mono12Packed")
  field(THVL, "0x010C0006")
  field(FRST, "Mono14")
  field(FRVL, "0x01100025")
  field(FVST, "BayerGR8")
  field(FVVL, "0x01080008")
  field(SXST, "BayerRG8")
  field(SXVL, "0x01080009")
  field(SVST, "BayerBG8")
  field(SVVL, "0x0108000B")
  field(EIST, "BayerBG10")
  field(EIVL, "0x0110000F")
  field(NIST, "BayerGR12")
  field(NIVL, "0x01100010")
  field(TEST, "BayerRG12")
  field(TEVL, "0x01100011")
  field(ELST, "BayerGR12Packed")
  field(ELVL, "0x010C002A")
  field(TVST, "BayerRG12Packed")
  field(TVVL, "0x010C002B")
  field(TTST, "RGB8Packed")
  field(TTVL, "0x02180014")
  field(FTST, "BGR8Packed")
  field(FTVL, "0x02180015")
  field(FFST, "RGBA8Packed")
  field(FFVL, "0x02200016")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_PixelFormat") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_PixelFormat")
  field(DOL,  "0x01080001")
  field(ZRST, "Mono8")
  field(ZRVL, "0x01080001")
  field(ONST, "Mono10")
  field(ONVL, "0x01100003")
  field(TWST, "Mono12")
  field(TWVL, "0x01100005")
  field(THST, "Mono12Packed")
  field(THVL, "0x010C0006")
  field(FRST, "Mono14")
  field(FRVL, "0x01100025")
  field(FVST, "BayerGR8")
  field(FVVL, "0x01080008")
  field(SXST, "BayerRG8")
  field(SXVL, "0x01080009")
  field(SVST, "BayerBG8")
  field(SVVL, "0x0108000B")
  field(EIST, "BayerBG10")
  field(EIVL, "0x0110000F")
  field(NIST, "BayerGR12")
  field(NIVL, "0x01100010")
  field(TEST, "BayerRG12")
  field(TEVL, "0x01100011")
  field(ELST, "BayerGR12Packed")
  field(ELVL, "0x010C002A")
  field(TVST, "BayerRG12Packed")
  field(TVVL, "0x010C002B")
  field(TTST, "RGB8Packed")
  field(TTVL, "0x02180014")
  field(FTST, "BGR8Packed")
  field(FTVL, "0x02180015")
  field(FFST, "RGBA8Packed")
  field(FFVL, "0x02200016")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_Width_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_Width")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_Width") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_Width")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_Height_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_Height")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_Height") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_Height")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_OffsetX_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_OffsetX")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_OffsetX") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_OffsetX")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_OffsetY_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_OffsetY")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_OffsetY") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_OffsetY")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_ImageSize_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_ImageSize")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_ImageSize") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_ImageSize")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_Gamma_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_Gamma")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_Gamma") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_Gamma")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_NirMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_NirMode")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On_HighQuality")
  field(ONVL, "1")
  field(TWST, "On_Fast")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_NirMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_NirMode")
  field(DOL,  "0")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On_HighQuality")
  field(ONVL, "1")
  field(TWST, "On_Fast")
  field(TWVL, "2")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_Hue_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_Hue")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_Hue") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_Hue")
  field(PREC, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_Saturation_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_Saturation")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_Saturation") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_Saturation")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_EdgeFilter_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_EdgeFilter")
  field(ZRST, "Smooth2")
  field(ZRVL, "14")
  field(ONST, "Smooth1")
  field(ONVL, "15")
  field(TWST, "Off")
  field(TWVL, "16")
  field(THST, "Sharpen1")
  field(THVL, "17")
  field(FRST, "Sharpen2")
  field(FRVL, "18")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_EdgeFilter") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_EdgeFilter")
  field(DOL,  "14")
  field(ZRST, "Smooth2")
  field(ZRVL, "14")
  field(ONST, "Smooth1")
  field(ONVL, "15")
  field(TWST, "Off")
  field(TWVL, "16")
  field(THST, "Sharpen1")
  field(THVL, "17")
  field(FRST, "Sharpen2")
  field(FRVL, "18")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_DSPSubregionLeft_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_DSPSubregionLeft")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_DSPSubregionLeft") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_DSPSubregionLeft")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_DSPSubregionTop_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_DSPSubregionTop")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_DSPSubregionTop") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_DSPSubregionTop")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_DSPSubregionRight_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_DSPSubregionRight")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_DSPSubregionRight") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_DSPSubregionRight")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_DSPSubBottom_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_DSPSubregionBottom")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_DSPSubBottom") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_DSPSubregionBottom")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_ExposureMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_ExposureMode")
  field(ZRST, "Timed")
  field(ZRVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_ExposureMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_ExposureMode")
  field(DOL,  "1")
  field(ZRST, "Timed")
  field(ZRVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_ExposureTimeAbs_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_ExposureTimeAbs")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_ExposureTimeAbs") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_ExposureTimeAbs")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_ExposureAuto_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_ExposureAuto")
  field(ZRST, "Off")
  field(ZRVL, "1")
  field(ONST, "Once")
  field(ONVL, "3")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(THST, "other")
  field(THVL, "4")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_ExposureAuto") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_ExposureAuto")
  field(DOL,  "1")
  field(ZRST, "Off")
  field(ZRVL, "1")
  field(ONST, "Once")
  field(ONVL, "3")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(THST, "other")
  field(THVL, "4")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_ExpAutoTarget_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureAutoTarget")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_ExpAutoTarget") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureAutoTarget")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_ExposureAutoAlg_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_ExposureAutoAlg")
  field(ZRST, "Mean")
  field(ZRVL, "0")
  field(ONST, "FitRange")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_ExposureAutoAlg") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_ExposureAutoAlg")
  field(DOL,  "0")
  field(ZRST, "Mean")
  field(ZRVL, "0")
  field(ONST, "FitRange")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_ExposureAutoMin_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureAutoMin")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_ExposureAutoMin") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureAutoMin")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_ExposureAutoMax_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureAutoMax")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_ExposureAutoMax") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureAutoMax")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_ExposureAutoRate_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureAutoRate")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_ExposureAutoRate") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureAutoRate")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_ExpAutoOutliers_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureAutoOutliers")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_ExpAutoOutliers") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureAutoOutliers")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_ExpAutoAdjustTol_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureAutoAdjustTol")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_ExpAutoAdjustTol") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureAutoAdjustTol")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_GainSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_GainSelector")
  field(ZRST, "All")
  field(ZRVL, "0")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_GainSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_GainSelector")
  field(DOL,  "0")
  field(ZRST, "All")
  field(ZRVL, "0")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_Gain_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_Gain")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_Gain") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_Gain")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_GainAuto_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_GainAuto")
  field(ZRST, "Off")
  field(ZRVL, "1")
  field(ONST, "Once")
  field(ONVL, "3")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_GainAuto") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_GainAuto")
  field(DOL,  "1")
  field(ZRST, "Off")
  field(ZRVL, "1")
  field(ONST, "Once")
  field(ONVL, "3")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_GainAutoTarget_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_GainAutoTarget")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_GainAutoTarget") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_GainAutoTarget")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_GainAutoMin_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_GainAutoMin")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_GainAutoMin") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_GainAutoMin")
  field(PREC, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_GainAutoMax_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_GainAutoMax")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_GainAutoMax") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_GainAutoMax")
  field(PREC, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_GainAutoRate_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_GainAutoRate")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_GainAutoRate") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_GainAutoRate")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_GainAutoOutliers_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_GainAutoOutliers")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_GainAutoOutliers") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_GainAutoOutliers")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_GainAutoAdjustTol_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_GainAutoAdjustTol")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_GainAutoAdjustTol") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_GainAutoAdjustTol")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_BlaLevelSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_BlackLevelSelector")
  field(ZRST, "All")
  field(ZRVL, "0")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_BlaLevelSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_BlackLevelSelector")
  field(DOL,  "0")
  field(ZRST, "All")
  field(ZRVL, "0")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_BlackLevel_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_BlackLevel")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_BlackLevel") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_BlackLevel")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_BalRatioSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_BalanceRatioSelector")
  field(ZRST, "Red")
  field(ZRVL, "0")
  field(ONST, "Blue")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_BalRatioSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_BalanceRatioSelector")
  field(DOL,  "0")
  field(ZRST, "Red")
  field(ZRVL, "0")
  field(ONST, "Blue")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_BalanceRatioAbs_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_BalanceRatioAbs")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_BalanceRatioAbs") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_BalanceRatioAbs")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_BalanceWhiteAuto_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_BalanceWhiteAuto")
  field(ZRST, "Off")
  field(ZRVL, "1")
  field(ONST, "Once")
  field(ONVL, "3")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_BalanceWhiteAuto") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_BalanceWhiteAuto")
  field(DOL,  "1")
  field(ZRST, "Off")
  field(ZRVL, "1")
  field(ONST, "Once")
  field(ONVL, "3")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_BalWhiteAutoRate_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_BalanceWhiteAutoRate")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_BalWhiteAutoRate") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_BalanceWhiteAutoRate")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_BalWhiAutAdjTol_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_BalanceWhiteAutoAdjustTol")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_BalWhiAutAdjTol") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_BalanceWhiteAutoAdjustTol")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_IrisMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_IrisMode")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Video")
  field(ONVL, "1")
  field(TWST, "VideoOpen")
  field(TWVL, "2")
  field(THST, "VideoClose")
  field(THVL, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_IrisMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_IrisMode")
  field(DOL,  "0")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Video")
  field(ONVL, "1")
  field(TWST, "VideoOpen")
  field(TWVL, "2")
  field(THST, "VideoClose")
  field(THVL, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_IrisAutoTarget_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_IrisAutoTarget")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_IrisAutoTarget") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_IrisAutoTarget")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_IrisVideoLevel_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_IrisVideoLevel")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_IrisVideoLevel") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_IrisVideoLevel")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_IrisVideoLevelMin_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_IrisVideoLevelMin")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_IrisVideoLevelMin") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_IrisVideoLevelMin")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_IrisVideoLevelMax_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_IrisVideoLevelMax")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_IrisVideoLevelMax") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_IrisVideoLevelMax")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_DefMasColEnable_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_DefectMaskColumnEnable")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Enabled")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_DefMasColEnable") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_DefectMaskColumnEnable")
  field(DOL,  "0")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Enabled")
  field(ONVL, "1")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_DefMasPixelEnable_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_DefectMaskPixelEnable")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Enabled")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_DefMasPixelEnable") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_DefectMaskPixelEnable")
  field(DOL,  "0")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Enabled")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_VsubValue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_VsubValue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_VsubValue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_VsubValue")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_ColTraSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_ColorTransformationSelector")
  field(ZRST, "RGBtoRGB")
  field(ZRVL, "0")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_ColTraSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_ColorTransformationSelector")
  field(DOL,  "0")
  field(ZRST, "RGBtoRGB")
  field(ZRVL, "0")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_ColTraMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_ColorTransformationMode")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "Manual")
  field(ONVL, "1")
  field(TWST, "Temp6500K")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_ColTraMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_ColorTransformationMode")
  field(DOL,  "0")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "Manual")
  field(ONVL, "1")
  field(TWST, "Temp6500K")
  field(TWVL, "2")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_ColTraValSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_ColorTransformationValueSelector")
  field(ZRST, "Gain00")
  field(ZRVL, "0")
  field(ONST, "Gain01")
  field(ONVL, "1")
  field(TWST, "Gain02")
  field(TWVL, "2")
  field(THST, "Gain10")
  field(THVL, "3")
  field(FRST, "Gain11")
  field(FRVL, "4")
  field(FVST, "Gain12")
  field(FVVL, "5")
  field(SXST, "Gain20")
  field(SXVL, "6")
  field(SVST, "Gain21")
  field(SVVL, "7")
  field(EIST, "Gain22")
  field(EIVL, "8")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_ColTraValSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_ColorTransformationValueSelector")
  field(DOL,  "0")
  field(ZRST, "Gain00")
  field(ZRVL, "0")
  field(ONST, "Gain01")
  field(ONVL, "1")
  field(TWST, "Gain02")
  field(TWVL, "2")
  field(THST, "Gain10")
  field(THVL, "3")
  field(FRST, "Gain11")
  field(FRVL, "4")
  field(FVST, "Gain12")
  field(FVVL, "5")
  field(SXST, "Gain20")
  field(SXVL, "6")
  field(SVST, "Gain21")
  field(SVVL, "7")
  field(EIST, "Gain22")
  field(EIVL, "8")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_ColTraValue_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_D_ColorTransformationValue")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_ColTraValue") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_D_ColorTransformationValue")
  field(PREC, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_LUTSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_LUTSelector")
  field(ZRST, "LUT1")
  field(ZRVL, "0")
  field(ONST, "LUT2")
  field(ONVL, "1")
  field(TWST, "LUT3")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_LUTSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_LUTSelector")
  field(DOL,  "0")
  field(ZRST, "LUT1")
  field(ZRVL, "0")
  field(ONST, "LUT2")
  field(ONVL, "1")
  field(TWST, "LUT3")
  field(TWVL, "2")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_LUTMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_LUTMode")
  field(ZRST, "Luminance")
  field(ZRVL, "0")
  field(ONST, "Red")
  field(ONVL, "1")
  field(TWST, "Green")
  field(TWVL, "2")
  field(THST, "Blue")
  field(THVL, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_LUTMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_LUTMode")
  field(DOL,  "0")
  field(ZRST, "Luminance")
  field(ZRVL, "0")
  field(ONST, "Red")
  field(ONVL, "1")
  field(TWST, "Green")
  field(TWVL, "2")
  field(THST, "Blue")
  field(THVL, "3")
  field(DISA, "0")
}

record(bi, "BL03S-EA-FSCN-02:CAM:GC_LUTEnable_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_B_LUTEnable")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(bo, "BL03S-EA-FSCN-02:CAM:GC_LUTEnable") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_B_LUTEnable")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_LUTIndex_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_LUTIndex")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_LUTIndex") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_LUTIndex")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_LUTValue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_LUTValue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_LUTValue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_LUTValue")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-02:CAM:GC_LUTLoad") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_C_LUTLoad")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-02:CAM:GC_LUTSave") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_C_LUTSave")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_LUTBitDepthIn_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_LUTBitDepthIn")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_LUTBitDepthIn") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_LUTBitDepthIn")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_LUTBitDepthOut_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_LUTBitDepthOut")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_LUTBitDepthOut") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_LUTBitDepthOut")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_LUTAddress_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_LUTAddress")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_LUTAddress") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_LUTAddress")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_LUTSizeBytes_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_LUTSizeBytes")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_LUTSizeBytes") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_LUTSizeBytes")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_SyncInLevels_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_SyncInLevels")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_SyncInLevels") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_SyncInLevels")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_SyncInSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_SyncInSelector")
  field(ZRST, "SyncIn1")
  field(ZRVL, "0")
  field(ONST, "SyncIn2")
  field(ONVL, "1")
  field(TWST, "SyncIn3")
  field(TWVL, "2")
  field(THST, "SyncIn4")
  field(THVL, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_SyncInSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_SyncInSelector")
  field(DOL,  "0")
  field(ZRST, "SyncIn1")
  field(ZRVL, "0")
  field(ONST, "SyncIn2")
  field(ONVL, "1")
  field(TWST, "SyncIn3")
  field(TWVL, "2")
  field(THST, "SyncIn4")
  field(THVL, "3")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_SynInGlitchFilter_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_SyncInGlitchFilter")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_SynInGlitchFilter") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_SyncInGlitchFilter")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_SyncOutLevels_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_SyncOutLevels")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_SyncOutLevels") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_SyncOutLevels")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_SyncOutSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_SyncOutSelector")
  field(ZRST, "SyncOut1")
  field(ZRVL, "0")
  field(ONST, "SyncOut2")
  field(ONVL, "1")
  field(TWST, "SyncOut3")
  field(TWVL, "2")
  field(THST, "SyncOut4")
  field(THVL, "3")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_SyncOutSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_SyncOutSelector")
  field(DOL,  "0")
  field(ZRST, "SyncOut1")
  field(ZRVL, "0")
  field(ONST, "SyncOut2")
  field(ONVL, "1")
  field(TWST, "SyncOut3")
  field(TWVL, "2")
  field(THST, "SyncOut4")
  field(THVL, "3")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_SyncOutSource_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_SyncOutSource")
  field(ZRST, "GPO")
  field(ZRVL, "0")
  field(ONST, "AcquisitionTrigg")
  field(ONVL, "1")
  field(TWST, "FrameTriggerRead")
  field(TWVL, "2")
  field(THST, "FrameTrigger")
  field(THVL, "3")
  field(FRST, "Exposing")
  field(FRVL, "4")
  field(FVST, "FrameReadout")
  field(FVVL, "5")
  field(SXST, "Imaging")
  field(SXVL, "6")
  field(SVST, "Acquiring")
  field(SVVL, "7")
  field(EIST, "LineIn1")
  field(EIVL, "8")
  field(NIST, "LineIn2")
  field(NIVL, "9")
  field(TEST, "Strobe1")
  field(TEVL, "12")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_SyncOutSource") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_SyncOutSource")
  field(DOL,  "0")
  field(ZRST, "GPO")
  field(ZRVL, "0")
  field(ONST, "AcquisitionTrigg")
  field(ONVL, "1")
  field(TWST, "FrameTriggerRead")
  field(TWVL, "2")
  field(THST, "FrameTrigger")
  field(THVL, "3")
  field(FRST, "Exposing")
  field(FRVL, "4")
  field(FVST, "FrameReadout")
  field(FVVL, "5")
  field(SXST, "Imaging")
  field(SXVL, "6")
  field(SVST, "Acquiring")
  field(SVVL, "7")
  field(EIST, "LineIn1")
  field(EIVL, "8")
  field(NIST, "LineIn2")
  field(NIVL, "9")
  field(TEST, "Strobe1")
  field(TEVL, "12")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_SyncOutPolarity_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_SyncOutPolarity")
  field(ZRST, "Normal")
  field(ZRVL, "0")
  field(ONST, "Invert")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_SyncOutPolarity") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_SyncOutPolarity")
  field(DOL,  "0")
  field(ZRST, "Normal")
  field(ZRVL, "0")
  field(ONST, "Invert")
  field(ONVL, "1")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_StrobeSource_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_StrobeSource")
  field(ZRST, "AcquisitionTrigg")
  field(ZRVL, "1")
  field(ONST, "FrameTriggerRead")
  field(ONVL, "2")
  field(TWST, "FrameTrigger")
  field(TWVL, "3")
  field(THST, "Exposing")
  field(THVL, "4")
  field(FRST, "FrameReadout")
  field(FRVL, "5")
  field(FVST, "Acquiring")
  field(FVVL, "7")
  field(SXST, "LineIn1")
  field(SXVL, "8")
  field(SVST, "LineIn2")
  field(SVVL, "9")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_StrobeSource") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_StrobeSource")
  field(DOL,  "1")
  field(ZRST, "AcquisitionTrigg")
  field(ZRVL, "1")
  field(ONST, "FrameTriggerRead")
  field(ONVL, "2")
  field(TWST, "FrameTrigger")
  field(TWVL, "3")
  field(THST, "Exposing")
  field(THVL, "4")
  field(FRST, "FrameReadout")
  field(FRVL, "5")
  field(FVST, "Acquiring")
  field(FVVL, "7")
  field(SXST, "LineIn1")
  field(SXVL, "8")
  field(SVST, "LineIn2")
  field(SVVL, "9")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_StrDurationMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_StrobeDurationMode")
  field(ZRST, "Source")
  field(ZRVL, "0")
  field(ONST, "Controlled")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_StrDurationMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_StrobeDurationMode")
  field(DOL,  "0")
  field(ZRST, "Source")
  field(ZRVL, "0")
  field(ONST, "Controlled")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_StrobeDelay_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_StrobeDelay")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_StrobeDelay") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_StrobeDelay")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_StrobeDuration_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_StrobeDuration")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_StrobeDuration") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_StrobeDuration")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_EventSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_EventSelector")
  field(ZRST, "AcquisitionStart")
  field(ZRVL, "40000")
  field(ONST, "AcquisitionEnd")
  field(ONVL, "40001")
  field(TWST, "FrameTrigger")
  field(TWVL, "40002")
  field(THST, "ExposureEnd")
  field(THVL, "40003")
  field(FRST, "AcquisitionRecor")
  field(FRVL, "40004")
  field(FVST, "Line1RisingEdge")
  field(FVVL, "40010")
  field(SXST, "Line1FallingEdge")
  field(SXVL, "40011")
  field(SVST, "Line2RisingEdge")
  field(SVVL, "40012")
  field(EIST, "Line2FallingEdge")
  field(EIVL, "40013")
  field(NIST, "Line3RisingEdge")
  field(NIVL, "40014")
  field(TEST, "Line3FallingEdge")
  field(TEVL, "40015")
  field(ELST, "Line4RisingEdge")
  field(ELVL, "40016")
  field(TVST, "Line4FallingEdge")
  field(TVVL, "40017")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_EventSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_EventSelector")
  field(DOL,  "40000")
  field(ZRST, "AcquisitionStart")
  field(ZRVL, "40000")
  field(ONST, "AcquisitionEnd")
  field(ONVL, "40001")
  field(TWST, "FrameTrigger")
  field(TWVL, "40002")
  field(THST, "ExposureEnd")
  field(THVL, "40003")
  field(FRST, "AcquisitionRecor")
  field(FRVL, "40004")
  field(FVST, "Line1RisingEdge")
  field(FVVL, "40010")
  field(SXST, "Line1FallingEdge")
  field(SXVL, "40011")
  field(SVST, "Line2RisingEdge")
  field(SVVL, "40012")
  field(EIST, "Line2FallingEdge")
  field(EIVL, "40013")
  field(NIST, "Line3RisingEdge")
  field(NIVL, "40014")
  field(TEST, "Line3FallingEdge")
  field(TEVL, "40015")
  field(ELST, "Line4RisingEdge")
  field(ELVL, "40016")
  field(TVST, "Line4FallingEdge")
  field(TVVL, "40017")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_EventNotification_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_EventNotification")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_EventNotification") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_EventNotification")
  field(DOL,  "0")
  field(ZRST, "Off")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EventsEnable1_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventsEnable1")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EventsEnable1") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventsEnable1")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EveAcqStart_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventAcquisitionStart")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EveAcqStart") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventAcquisitionStart")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EveAcquisitionEnd_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventAcquisitionEnd")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EveAcquisitionEnd") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventAcquisitionEnd")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EventFrameTrigger_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventFrameTrigger")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EventFrameTrigger") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventFrameTrigger")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EventExposureEnd_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventExposureEnd")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EventExposureEnd") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventExposureEnd")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EveAcqRecTrigger_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventAcquisitionRecordTrigger")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EveAcqRecTrigger") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventAcquisitionRecordTrigger")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EveLinRisingEdge_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine1RisingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EveLinRisingEdge") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine1RisingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EveLinFallingEdge_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine1FallingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EveLinFallingEdge") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine1FallingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EveLinRisingEdg0_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine2RisingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EveLinRisingEdg0") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine2RisingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EveLinFallingEdg0_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine2FallingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EveLinFallingEdg0") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine2FallingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EveLinRisingEdg1_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine3RisingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EveLinRisingEdg1") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine3RisingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EveLinFallingEdg1_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine3FallingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EveLinFallingEdg1") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine3FallingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EveLinRisingEdg2_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine4RisingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EveLinRisingEdg2") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine4RisingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EveLinFallingEdg2_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine4FallingEdge")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EveLinFallingEdg2") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventLine4FallingEdge")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EventOverflow_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventOverflow")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EventOverflow") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventOverflow")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_EventError_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_EventError")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_EventError") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_EventError")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_UserSetSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_UserSetSelector")
  field(ZRST, "Default")
  field(ZRVL, "0")
  field(ONST, "UserSet1")
  field(ONVL, "1")
  field(TWST, "UserSet2")
  field(TWVL, "2")
  field(THST, "UserSet3")
  field(THVL, "3")
  field(FRST, "UserSet4")
  field(FRVL, "4")
  field(FVST, "UserSet5")
  field(FVVL, "5")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_UserSetSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_UserSetSelector")
  field(DOL,  "0")
  field(ZRST, "Default")
  field(ZRVL, "0")
  field(ONST, "UserSet1")
  field(ONVL, "1")
  field(TWST, "UserSet2")
  field(TWVL, "2")
  field(THST, "UserSet3")
  field(THVL, "3")
  field(FRST, "UserSet4")
  field(FRVL, "4")
  field(FVST, "UserSet5")
  field(FVVL, "5")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-02:CAM:GC_UserSetLoad") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_C_UserSetLoad")
  field(DISA, "0")
}

record(longout, "BL03S-EA-FSCN-02:CAM:GC_UserSetSave") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_C_UserSetSave")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_UseSetDefSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_UserSetDefaultSelector")
  field(ZRST, "Default")
  field(ZRVL, "0")
  field(ONST, "UserSet1")
  field(ONVL, "1")
  field(TWST, "UserSet2")
  field(TWVL, "2")
  field(THST, "UserSet3")
  field(THVL, "3")
  field(FRST, "UserSet4")
  field(FRVL, "4")
  field(FVST, "UserSet5")
  field(FVVL, "5")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_UseSetDefSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_UserSetDefaultSelector")
  field(DOL,  "0")
  field(ZRST, "Default")
  field(ZRVL, "0")
  field(ONST, "UserSet1")
  field(ONVL, "1")
  field(TWST, "UserSet2")
  field(TWVL, "2")
  field(THST, "UserSet3")
  field(THVL, "3")
  field(FRST, "UserSet4")
  field(FRVL, "4")
  field(FVST, "UserSet5")
  field(FVVL, "5")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_LensVoltage_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_LensVoltage")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_LensVoltage") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_LensVoltage")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_LenVoltageControl_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_LensVoltageControl")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_LenVoltageControl") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_LensVoltageControl")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_LensDriveCommand_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_LensDriveCommand")
  field(ZRST, "Stop")
  field(ZRVL, "0")
  field(ONST, "IrisTimedOpen")
  field(ONVL, "1")
  field(TWST, "IrisTimedClose")
  field(TWVL, "2")
  field(THST, "FocusTimedNear")
  field(THVL, "3")
  field(FRST, "FocusTimedFar")
  field(FRVL, "4")
  field(FVST, "ZoomTimedIn")
  field(FVVL, "5")
  field(SXST, "ZoomTimedOut")
  field(SXVL, "6")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_LensDriveCommand") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_LensDriveCommand")
  field(DOL,  "0")
  field(ZRST, "Stop")
  field(ZRVL, "0")
  field(ONST, "IrisTimedOpen")
  field(ONVL, "1")
  field(TWST, "IrisTimedClose")
  field(TWVL, "2")
  field(THST, "FocusTimedNear")
  field(THVL, "3")
  field(FRST, "FocusTimedFar")
  field(FRVL, "4")
  field(FVST, "ZoomTimedIn")
  field(FVVL, "5")
  field(SXST, "ZoomTimedOut")
  field(SXVL, "6")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_LensDriveDuration_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_LensDriveDuration")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_LensDriveDuration") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_LensDriveDuration")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_PvDumTriSelector_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_PvDummyTriggerSelector")
  field(ZRST, "FrameStart")
  field(ZRVL, "0")
  field(ONST, "AcquisitionStart")
  field(ONVL, "3")
  field(TWST, "AcquisitionEnd")
  field(TWVL, "4")
  field(THST, "AcquisitionRecor")
  field(THVL, "6")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_PvDumTriSelector") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_PvDummyTriggerSelector")
  field(DOL,  "0")
  field(ZRST, "FrameStart")
  field(ZRVL, "0")
  field(ONST, "AcquisitionStart")
  field(ONVL, "3")
  field(TWST, "AcquisitionEnd")
  field(TWVL, "4")
  field(THST, "AcquisitionRecor")
  field(THVL, "6")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_PvDumFraStaTriMod_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_PvDummyFrameStartTriggerMode")
  field(ZRST, "Freerun")
  field(ZRVL, "2147483648")
  field(ONST, "SyncIn1")
  field(ONVL, "2147483649")
  field(TWST, "SyncIn2")
  field(TWVL, "2147483650")
  field(THST, "SyncIn3")
  field(THVL, "2147483651")
  field(FRST, "SyncIn4")
  field(FRVL, "2147483652")
  field(FVST, "FixedRate")
  field(FVVL, "2147483653")
  field(SXST, "Software")
  field(SXVL, "2147483654")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_PvDumFraStaTriMod") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_PvDummyFrameStartTriggerMode")
  field(DOL,  "2147483648")
  field(ZRST, "Freerun")
  field(ZRVL, "2147483648")
  field(ONST, "SyncIn1")
  field(ONVL, "2147483649")
  field(TWST, "SyncIn2")
  field(TWVL, "2147483650")
  field(THST, "SyncIn3")
  field(THVL, "2147483651")
  field(FRST, "SyncIn4")
  field(FRVL, "2147483652")
  field(FVST, "FixedRate")
  field(FVVL, "2147483653")
  field(SXST, "Software")
  field(SXVL, "2147483654")
  field(DISA, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_PvDumTriggerMode_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_E_PvDummyTriggerMode")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "SyncIn1")
  field(ONVL, "2147483649")
  field(TWST, "SyncIn2")
  field(TWVL, "2147483650")
  field(THST, "SyncIn3")
  field(THVL, "2147483651")
  field(FRST, "SyncIn4")
  field(FRVL, "2147483652")
  field(FVST, "FixedRate")
  field(FVVL, "2147483653")
  field(SXST, "Software")
  field(SXVL, "2147483654")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_PvDumTriggerMode") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_E_PvDummyTriggerMode")
  field(DOL,  "0")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "SyncIn1")
  field(ONVL, "2147483649")
  field(TWST, "SyncIn2")
  field(TWVL, "2147483650")
  field(THST, "SyncIn3")
  field(THVL, "2147483651")
  field(FRST, "SyncIn4")
  field(FRVL, "2147483652")
  field(FVST, "FixedRate")
  field(FVVL, "2147483653")
  field(SXST, "Software")
  field(SXVL, "2147483654")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_FraStaTriDelay_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_FrameStartTriggerDelay")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_FraStaTriDelay") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_FrameStartTriggerDelay")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_ExposureValue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureValue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_ExposureValue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_ExposureValue")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_TimeStampValueLo_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_TimeStampValueLo")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_TimeStampValueLo") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_TimeStampValueLo")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_TimeStampValueHi_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_TimeStampValueHi")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_TimeStampValueHi") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_TimeStampValueHi")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_WhitebalValueRed_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_WhitebalValueRed")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_WhitebalValueRed") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_WhitebalValueRed")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_WhitebalValueBlue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_WhitebalValueBlue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_WhitebalValueBlue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_WhitebalValueBlue")
  field(DISA, "0")
}

record(stringin, "BL03S-EA-FSCN-02:CAM:GC_ModelName_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_S_ModelName")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_GainValue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_GainValue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_GainValue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_GainValue")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_PvGainAutoMin_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_PvGainAutoMin")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_PvGainAutoMin") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_PvGainAutoMin")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_PvGainAutoMax_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_PvGainAutoMax")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_PvGainAutoMax") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_PvGainAutoMax")
  field(DISA, "0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_OffsetValue_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn(FSCN2.CAM,0,1)GC_I_OffsetValue")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_OffsetValue") {
  field(DTYP, "asynInt64")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)GC_I_OffsetValue")
  field(DISA, "0")
}

# Database for the records specific to the ADAravis driver
# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout, default 1
#% macro, ADDR, Asyn Port address, default 0

# This associates a BOY screen with the template
# % gui, FSCN1.CAM, boydetail, aravisApp_opi/aravis_detail.opi, P=BL03S-EA-FSCN-01, R=:CAM:, DESC=Camera
# % gui, FSCN1.CAM, boyembed, aravisApp_opi/aravis_embed_box.opi, P=BL03S-EA-FSCN-01, R=:CAM:, DESC=Camera
# % gui, FSCN1.CAM, boyembed, aravisApp_opi/aravis_embed.opi, P=BL03S-EA-FSCN-01, R=:CAM:, DESC=Camera

## ADGenICam.template
## Template database file to control some features of ADGenICam.
##
## Note: this file contains only the records that are not handled by the camera-specific GenICam autogenerated database

#=================================================================#
# Template file: ADBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#  Using SCANRATE:The ImageJ EPICS_AD_Viewer plugin monitors ArrayCounter_RBV to decide
#  when there is a new image to display. That means that it will not display faster than
#  the SCANRATE you select.

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "BL03S-EA-FSCN-01:CAM:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.CAM,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "BL03S-EA-FSCN-01:CAM:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.CAM,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "BL03S-EA-FSCN-01:CAM:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.CAM,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "BL03S-EA-FSCN-01:CAM:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.CAM,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-01:CAM:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.CAM,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-01:CAM:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.CAM,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-01:CAM:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.CAM,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-01:CAM:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.CAM,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "BL03S-EA-FSCN-01:CAM:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(FSCN1.CAM,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "BL03S-EA-FSCN-01:CAM:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "BL03S-EA-FSCN-01:CAM:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(FSCN1.CAM,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL03S-EA-FSCN-01:CAM:SetAcquireBusy")
{
    field(INPA, "BL03S-EA-FSCN-01:CAM:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "BL03S-EA-FSCN-01:CAM:AcquireBusy PP")
}

record(bi, "BL03S-EA-FSCN-01:CAM:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "BL03S-EA-FSCN-01:CAM:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(FSCN1.CAM,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL03S-EA-FSCN-01:CAM:ClearAcquireBusy") {
    field(INPA, "BL03S-EA-FSCN-01:CAM:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "BL03S-EA-FSCN-01:CAM:AcquireBusy PP")
}

record(bo, "BL03S-EA-FSCN-01:CAM:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(FSCN1.CAM,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "BL03S-EA-FSCN-01:CAM:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.CAM,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "BL03S-EA-FSCN-01:CAM:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.CAM,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "BL03S-EA-FSCN-01:CAM:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(FSCN1.CAM,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim0SA")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim0SA")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize0")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize0")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim0SA")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim1SA")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim1SA")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize1")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize1")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim1SA")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim2SA")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim2SA")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize2")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize2")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim2SA")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim3SA")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim3SA")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize3")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize3")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim3SA")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim4SA")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim4SA")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize4")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize4")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim4SA")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim5SA")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim5SA")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize5")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize5")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim5SA")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim6SA")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim6SA")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize6")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize6")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim6SA")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim7SA")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim7SA")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize7")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize7")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim7SA")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim8SA")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim8SA")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize8")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize8")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim8SA")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim9SA")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim9SA")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize9")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize9")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim9SA")
}


record(waveform, "BL03S-EA-FSCN-01:CAM:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(FSCN1.CAM,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim0SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize0_RBV")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize0_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim0SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim1SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim1SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize1_RBV")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize1_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim1SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim2SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim2SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize2_RBV")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize2_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim2SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim3SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim3SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize3_RBV")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize3_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim3SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim4SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim4SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize4_RBV")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize4_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim4SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim5SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim5SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize5_RBV")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize5_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim5SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim6SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim6SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize6_RBV")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize6_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim6SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim7SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim7SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize7_RBV")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize7_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim7SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim8SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim8SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize8_RBV")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize8_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim8SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:Dim9SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:CAM:Dim9SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ArraySize9_RBV")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize9_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:CAM:Dim9SA_RBV")
}


record(mbbi, "BL03S-EA-FSCN-01:CAM:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "BL03S-EA-FSCN-01:CAM:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.CAM,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:CAM:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "BL03S-EA-FSCN-01:CAM:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "BL03S-EA-FSCN-01:CAM:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "BL03S-EA-FSCN-01:CAM:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.CAM,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "BL03S-EA-FSCN-01:CAM:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(FSCN1.CAM,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:CAM:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.CAM,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:CAM:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.CAM,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "BL03S-EA-FSCN-01:CAM:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.CAM,0,1)ARRAY_COUNTER")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.CAM,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "BL03S-EA-FSCN-01:CAM:ArrayRate_RBV")
{
    field(INPA, "BL03S-EA-FSCN-01:CAM:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "BL03S-EA-FSCN-01:CAM:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "BL03S-EA-FSCN-01:CAM:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "BL03S-EA-FSCN-01:CAM:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.CAM,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL03S-EA-FSCN-01:CAM:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.CAM,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "BL03S-EA-FSCN-01:CAM:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(FSCN1.CAM,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "BL03S-EA-FSCN-01:CAM:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(FSCN1.CAM,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "BL03S-EA-FSCN-01:CAM:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.CAM,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "BL03S-EA-FSCN-01:CAM:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "BL03S-EA-FSCN-01:CAM:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "BL03S-EA-FSCN-01:CAM:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "BL03S-EA-FSCN-01:CAM:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "BL03S-EA-FSCN-01:CAM:PoolFreeBuffers")
}

record(longin, "BL03S-EA-FSCN-01:CAM:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "BL03S-EA-FSCN-01:CAM:PoolUsedBuffers")
}

record(calc, "BL03S-EA-FSCN-01:CAM:PoolUsedBuffers")
{
    field(INPA, "BL03S-EA-FSCN-01:CAM:PoolAllocBuffers NPP MS")
    field(INPB, "BL03S-EA-FSCN-01:CAM:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "BL03S-EA-FSCN-01:CAM:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "BL03S-EA-FSCN-01:CAM:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:CAM:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)MAX_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:CAM:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)MAX_SIZE_Y")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the detector readout                     #
#  including binning, region start and size                       # 
###################################################################

record(longout, "BL03S-EA-FSCN-01:CAM:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)BIN_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-01:CAM:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)BIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-01:CAM:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)BIN_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-01:CAM:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)BIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-01:CAM:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)MIN_X")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-01:CAM:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)MIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-01:CAM:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)MIN_Y")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-01:CAM:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)MIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-01:CAM:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)SIZE_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-01:CAM:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-01:CAM:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)SIZE_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-01:CAM:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(bo, "BL03S-EA-FSCN-01:CAM:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "BL03S-EA-FSCN-01:CAM:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "BL03S-EA-FSCN-01:CAM:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "BL03S-EA-FSCN-01:CAM:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the acquisition time and                 #
#  period                                                         # 
###################################################################
record(ao, "BL03S-EA-FSCN-01:CAM:AcquireTime")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)ACQ_TIME")
   field(PREC, "3")
   field(VAL,  "1.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-01:CAM:AcquireTime_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)ACQ_TIME")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "BL03S-EA-FSCN-01:CAM:AcquirePeriod")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-01:CAM:AcquirePeriod_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ai, "BL03S-EA-FSCN-01:CAM:TimeRemaining_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)TIME_REMAINING")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the gain                                 # 
###################################################################
record(ao, "BL03S-EA-FSCN-01:CAM:Gain")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)GAIN")
   field(VAL,  "1.0")
   field(PREC, "3")
   info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-01:CAM:Gain_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)GAIN")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the frame type                           # 
###################################################################
record(mbbo, "BL03S-EA-FSCN-01:CAM:FrameType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:FrameType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the acquisition mode                     # 
###################################################################
record(mbbo, "BL03S-EA-FSCN-01:CAM:ImageMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(VAL,  "2")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:ImageMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the trigger mode                         # 
###################################################################
record(mbbo, "BL03S-EA-FSCN-01:CAM:TriggerMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the number of exposures and              #
#  number of images                                               # 
###################################################################
record(longout, "BL03S-EA-FSCN-01:CAM:NumExposures")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)NEXPOSURES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-01:CAM:NumExposures_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)NEXPOSURES")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:CAM:NumExposuresCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)NEXPOSURES_COUNTER")
   field(SCAN, "I/O Intr")
}
record(longout, "BL03S-EA-FSCN-01:CAM:NumImages")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)NIMAGES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-01:CAM:NumImages_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)NIMAGES")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:CAM:NumImagesCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)NIMAGES_COUNTER")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are for the detector state                       # 
###################################################################

record(mbbi, "BL03S-EA-FSCN-01:CAM:DetectorState_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.CAM,0,1)STATUS")
    field(ZRST, "Idle")
    field(ZRVL, "0")
    field(ZRSV, "NO_ALARM")
    field(ONST, "Acquire")
    field(ONVL, "1")
    field(ONSV, "NO_ALARM")
    field(TWST, "Readout")
    field(TWVL, "2")
    field(TWSV, "NO_ALARM")
    field(THST, "Correct")
    field(THVL, "3")
    field(THSV, "NO_ALARM")
    field(FRST, "Saving")
    field(FRVL, "4")
    field(FRSV, "NO_ALARM")
    field(FVST, "Aborting")
    field(FVVL, "5")
    field(FVSV, "MINOR")
    field(SXST, "Error")
    field(SXVL, "6")
    field(SXSV, "MAJOR")
    field(SVST, "Waiting")
    field(SVVL, "7")
    field(SVSV, "NO_ALARM")
    field(EIST, "Initializing")
    field(EIVL, "8")
    field(EISV, "NO_ALARM")
    field(NIST, "Disconnected")
    field(NIVL, "9")
    field(NISV, "INVALID")
    field(TEST, "Aborted")
    field(TEVL, "10")
    field(TESV, "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide status information                       # 
###################################################################

# Status message.
record(waveform, "BL03S-EA-FSCN-01:CAM:StatusMessage_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(FSCN1.CAM,0,1)STATUS_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "BL03S-EA-FSCN-01:CAM:StringToServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(FSCN1.CAM,0,1)STRING_TO_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "BL03S-EA-FSCN-01:CAM:StringFromServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(FSCN1.CAM,0,1)STRING_FROM_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

################################################################@###
#  This record can be used to force a read of the detector status  # 
####################################################################
record(bo,"BL03S-EA-FSCN-01:CAM:ReadStatus") {
    field(DTYP,"asynInt32")
    field(OUT, "@asyn(FSCN1.CAM,0,1)READ_STATUS")
    field(VAL, "1")
    field(SCAN,"Passive")
    info(autosaveFields, "SCAN")
}

###################################################################
#  These records control the shutter                              # 
###################################################################

record(mbbo, "BL03S-EA-FSCN-01:CAM:ShutterMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.CAM,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Detector output")
    field(TWVL, "2")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:ShutterMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.CAM,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Camera output")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

record(bo, "BL03S-EA-FSCN-01:CAM:ShutterControl")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.CAM,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(VAL,  "0")
}

record(bi, "BL03S-EA-FSCN-01:CAM:ShutterControl_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.CAM,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(SCAN, "I/O Intr")
}

record(bi, "BL03S-EA-FSCN-01:CAM:ShutterStatus_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.CAM,0,1)SHUTTER_STATUS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "BL03S-EA-FSCN-01:CAM:ShutterOpenDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-01:CAM:ShutterOpenDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "BL03S-EA-FSCN-01:CAM:ShutterCloseDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-01:CAM:ShutterCloseDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

# This record changes state when the driver opens/closes an EPICS shutter
record(bi, "BL03S-EA-FSCN-01:CAM:ShutterControlEPICS")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.CAM,0,1)SHUTTER_CONTROL_EPICS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
    field(FLNK, "BL03S-EA-FSCN-01:CAM:ShutterFanout.PROC")
}

record(fanout, "BL03S-EA-FSCN-01:CAM:ShutterFanout")
{
    field(LNK1, "BL03S-EA-FSCN-01:CAM:ShutterOpenEPICS.PROC PP MS")
    field(LNK2, "BL03S-EA-FSCN-01:CAM:ShutterCloseEPICS.PROC PP MS")
}

record(calcout, "BL03S-EA-FSCN-01:CAM:ShutterOpenEPICS")
{
    field(INPA, "BL03S-EA-FSCN-01:CAM:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(calcout, "BL03S-EA-FSCN-01:CAM:ShutterCloseEPICS")
{
    field(INPA, "BL03S-EA-FSCN-01:CAM:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "0")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:ShutterStatusEPICS_RBV")
{
    field(DTYP, "Raw Soft Channel")
    field(INP,  "test CP MS")
    field(ZRVL, "0")
    field(ZRST, "Closed")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "Open")
    field(ONSV, "MINOR")
    info(autosaveFields, "INP ZRVL ONVL")
}

###################################################################
#  These records control the detector temperature                 # 
###################################################################
 
record(ao, "BL03S-EA-FSCN-01:CAM:Temperature")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(VAL,  "25.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-01:CAM:Temperature_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}

record(ai, "BL03S-EA-FSCN-01:CAM:TemperatureActual")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)TEMPERATURE_ACTUAL")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}


###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 



## These are the records from ADBase.template that we modify

# Some cameras use both AcquisitionFrameRate and AcquirePeriod.
# Make AcquirePeriod update if FrameRate is changed.
record(ao, "BL03S-EA-FSCN-01:CAM:AcquirePeriod")
{
   info(asyn:READBACK, "1")
}

# This record hides the fact that some cameras use FrameRate and some use FrameRateAbs
# This is not PINI=YES because AcquirePeriod is and they control the same thing
record(ao, "BL03S-EA-FSCN-01:CAM:FrameRate")
{
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN1.CAM 0)GC_FRAMERATE")
   field(PREC, "3")
}

record(ai, "BL03S-EA-FSCN-01:CAM:FrameRate_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM 0)GC_FRAMERATE")
   field(SCAN, "I/O Intr")
   field(PREC, "3")
}

# Some cameras (Basler, Point Grey, FLIR) use AcquisitionFrameRateEnable or AcquisitionFrameRateEnabled
# This record hides the fact that the feature name may differ; the record name is always the same.
record(bo, "BL03S-EA-FSCN-01:CAM:FrameRateEnable")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM 0)GC_FRAMERATE_ENABLE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "BL03S-EA-FSCN-01:CAM:FrameRateEnable_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM 0)GC_FRAMERATE_ENABLE")
   field(SCAN, "I/O Intr")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

# This record is used to ensure there is a record for TriggerSource even if there is no such GenICam feature
record(mbbo, "BL03S-EA-FSCN-01:CAM:TriggerSource")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM 0)GC_TRIGGER_SOURCE")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:TriggerSource_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM 0)GC_TRIGGER_SOURCE")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
   field(SCAN, "I/O Intr")
}

# This record is used to ensure there is a record for TriggerOverlap even if there is no such GenICam feature
record(mbbo, "BL03S-EA-FSCN-01:CAM:TriggerOverlap")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM 0)GC_TRIGGER_OVERLAP")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:TriggerOverlap_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM 0)GC_TRIGGER_OVERLAP")
   field(SCAN, "I/O Intr")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

# This record is used to ensure there is a record for TriggerSoftware even if there is no such GenICam feature
record(bo, "BL03S-EA-FSCN-01:CAM:TriggerSoftware")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM 0)GC_TRIGGER_SOFTWARE")
   field(ZNAM, "Done")
   field(ONAM, "Trigger")
}

# This record is used to ensure there is a record for ExposureMode even if there is no such GenICam feature
record(mbbo, "BL03S-EA-FSCN-01:CAM:ExposureMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM 0)GC_EXPOSURE_MODE")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:ExposureMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM 0)GC_EXPOSURE_MODE")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
   field(SCAN, "I/O Intr")
}

# This record is used to ensure there is a record for ExposureAuto even if there is no such GenICam feature
record(mbbo, "BL03S-EA-FSCN-01:CAM:ExposureAuto")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM 0)GC_EXPOSURE_AUTO")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:ExposureAuto_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM 0)GC_EXPOSURE_AUTO")
   field(SCAN, "I/O Intr")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

# This record is used to ensure there is a record for GainAuto even if there is no such GenICam feature
record(mbbo, "BL03S-EA-FSCN-01:CAM:GainAuto")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM 0)GC_GAIN_AUTO")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GainAuto_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM 0)GC_GAIN_AUTO")
   field(SCAN, "I/O Intr")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

# This record is used to ensure there is a record for PixelFormat even if there is no such GenICam feature
record(mbbo, "BL03S-EA-FSCN-01:CAM:PixelFormat")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM 0)GC_PIXEL_FORMAT")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:PixelFormat_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM 0)GC_PIXEL_FORMAT")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
   field(SCAN, "I/O Intr")
}

record(ai, "BL03S-EA-FSCN-01:CAM:ARFramesCompleted")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)ARAVIS_COMPLETED")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC LLSV LOLO LOW LSV")
}

record(ai, "BL03S-EA-FSCN-01:CAM:ARFrameFailures")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)ARAVIS_FAILURES")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(ai, "BL03S-EA-FSCN-01:CAM:ARFrameUnderruns")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.CAM,0,1)ARAVIS_UNDERRUNS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ARMissingPackets")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)ARAVIS_MISSING_PKTS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(longin, "BL03S-EA-FSCN-01:CAM:ARResentPackets")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.CAM,0,1)ARAVIS_RESENT_PKTS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:ARPacketResendEnable")
{
   field(DESC, "Packet resend enable")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)ARAVIS_PKT_RESEND")
   field(ZRST, "Never")
   field(ZRVL, "0")
   field(ONST, "Always")
   field(ONVL, "1")
   field(VAL,  "1")
   field(PINI, "1")
   info(autosaveFields, "DESC ONSV ZRSV PINI VAL")
}

record(longout, "BL03S-EA-FSCN-01:CAM:ARPacketTimeout")
{
   field(DESC, "Delay in us before packet resend request")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)ARAVIS_PKT_TIMEOUT")
   field(VAL,  "20000")
   field(EGU,  "us")
   field(PINI, "1")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL")
}

record(longout, "BL03S-EA-FSCN-01:CAM:ARFrameRetention")
{
   field(DESC, "Frame timeout in us after last packet")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)ARAVIS_FRAME_RETENTION")
   field(VAL,  "100000")
   field(EGU,  "us")
   field(PINI, "1")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL")
}

record(longout, "BL03S-EA-FSCN-01:CAM:ARResetCamera")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)ARAVIS_RESET")
   field(FLNK, "BL03S-EA-FSCN-01:CAM:ARConnectCamera")
}

record(longout, "BL03S-EA-FSCN-01:CAM:ARConnectCamera")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.CAM,0,1)ARAVIS_CONNECTION")
   field(VAL, "1")
   field(PINI, "1")
}

record(calcout, "BL03S-EA-FSCN-01:CAM:ARCheckConnection")
{
   field(SCAN, "1 second")
   field(INPA, "BL03S-EA-FSCN-01:CAM:ARConnectCamera.SEVR CP")
   field(CALC, "A==0")
   field(OOPT, "When Non-zero")
   field(OUT,  "BL03S-EA-FSCN-01:CAM:ARConnectCamera.PROC PP")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:ARConvertPixelFormat_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)ARAVIS_CONVERT_PIXEL_FORMAT")
  field(ZRST, "Mono16Low")
  field(ZRVL, "0")
  field(ONST, "Mono16High")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}


## When unpacking Mono12Packed or Mono12p selects whether 16-bit output is 
## left shifted by 4 bits (Mono16High) or not (Mono16Low)
record(mbbo, "BL03S-EA-FSCN-01:CAM:ARConvertPixelFormat") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)ARAVIS_CONVERT_PIXEL_FORMAT")
  field(ZRST, "Mono16Low")
  field(ZRVL, "0")
  field(ONST, "Mono16High")
  field(ONVL, "1")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}


record(mbbi, "BL03S-EA-FSCN-01:CAM:ARShiftDir_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)ARAVIS_SHIFT_DIR")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Left")
  field(ONVL, "1")
  field(TWST, "Right")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## Select no shift, left shift, or right shift when reading data 
record(mbbo, "BL03S-EA-FSCN-01:CAM:ARShiftDir") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)ARAVIS_SHIFT_DIR")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Left")
  field(ONVL, "1")
  field(TWST, "Right")
  field(TWVL, "2")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:ARShiftBits_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN1.CAM,0,1)ARAVIS_SHIFT_BITS")
  field(ZRST, "1")
  field(ZRVL, "1")
  field(ONST, "2")
  field(ONVL, "2")
  field(TWST, "3")
  field(TWVL, "3")
  field(THST, "4")
  field(THVL, "4")
  field(FRST, "5")
  field(FRVL, "5")
  field(FVST, "6")
  field(FVVL, "6")
  field(SXST, "7")
  field(SXVL, "7")
  field(SVST, "8")
  field(SVVL, "8")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## Selects how many bits to shift left or right when reading data 
record(mbbo, "BL03S-EA-FSCN-01:CAM:ARShiftBits") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN1.CAM,0,1)ARAVIS_SHIFT_BITS")
  field(ZRST, "1")
  field(ZRVL, "1")
  field(ONST, "2")
  field(ONVL, "2")
  field(TWST, "3")
  field(TWVL, "3")
  field(THST, "4")
  field(THVL, "4")
  field(FRST, "5")
  field(FRVL, "5")
  field(FVST, "6")
  field(FVVL, "6")
  field(SXST, "7")
  field(SXVL, "7")
  field(SVST, "8")
  field(SVVL, "8")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}
# Database for the records specific to the ADAravis driver
# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout, default 1
#% macro, ADDR, Asyn Port address, default 0

# This associates a BOY screen with the template
# % gui, FSCN2.CAM, boydetail, aravisApp_opi/aravis_detail.opi, P=BL03S-EA-FSCN-02, R=:CAM:, DESC=Camera
# % gui, FSCN2.CAM, boyembed, aravisApp_opi/aravis_embed_box.opi, P=BL03S-EA-FSCN-02, R=:CAM:, DESC=Camera
# % gui, FSCN2.CAM, boyembed, aravisApp_opi/aravis_embed.opi, P=BL03S-EA-FSCN-02, R=:CAM:, DESC=Camera

## ADGenICam.template
## Template database file to control some features of ADGenICam.
##
## Note: this file contains only the records that are not handled by the camera-specific GenICam autogenerated database

#=================================================================#
# Template file: ADBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#  Using SCANRATE:The ImageJ EPICS_AD_Viewer plugin monitors ArrayCounter_RBV to decide
#  when there is a new image to display. That means that it will not display faster than
#  the SCANRATE you select.

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "BL03S-EA-FSCN-02:CAM:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.CAM,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "BL03S-EA-FSCN-02:CAM:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.CAM,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "BL03S-EA-FSCN-02:CAM:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.CAM,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "BL03S-EA-FSCN-02:CAM:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.CAM,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-02:CAM:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.CAM,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-02:CAM:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.CAM,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-02:CAM:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.CAM,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-02:CAM:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.CAM,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "BL03S-EA-FSCN-02:CAM:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(FSCN2.CAM,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "BL03S-EA-FSCN-02:CAM:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "BL03S-EA-FSCN-02:CAM:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(FSCN2.CAM,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL03S-EA-FSCN-02:CAM:SetAcquireBusy")
{
    field(INPA, "BL03S-EA-FSCN-02:CAM:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "BL03S-EA-FSCN-02:CAM:AcquireBusy PP")
}

record(bi, "BL03S-EA-FSCN-02:CAM:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "BL03S-EA-FSCN-02:CAM:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(FSCN2.CAM,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL03S-EA-FSCN-02:CAM:ClearAcquireBusy") {
    field(INPA, "BL03S-EA-FSCN-02:CAM:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "BL03S-EA-FSCN-02:CAM:AcquireBusy PP")
}

record(bo, "BL03S-EA-FSCN-02:CAM:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(FSCN2.CAM,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "BL03S-EA-FSCN-02:CAM:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.CAM,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "BL03S-EA-FSCN-02:CAM:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.CAM,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "BL03S-EA-FSCN-02:CAM:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(FSCN2.CAM,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim0SA")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim0SA")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize0")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize0")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim0SA")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim1SA")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim1SA")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize1")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize1")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim1SA")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim2SA")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim2SA")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize2")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize2")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim2SA")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim3SA")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim3SA")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize3")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize3")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim3SA")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim4SA")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim4SA")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize4")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize4")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim4SA")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim5SA")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim5SA")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize5")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize5")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim5SA")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim6SA")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim6SA")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize6")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize6")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim6SA")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim7SA")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim7SA")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize7")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize7")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim7SA")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim8SA")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim8SA")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize8")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize8")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim8SA")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim9SA")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim9SA")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize9")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize9")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim9SA")
}


record(waveform, "BL03S-EA-FSCN-02:CAM:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(FSCN2.CAM,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim0SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize0_RBV")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize0_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim0SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim1SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim1SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize1_RBV")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize1_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim1SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim2SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim2SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize2_RBV")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize2_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim2SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim3SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim3SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize3_RBV")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize3_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim3SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim4SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim4SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize4_RBV")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize4_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim4SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim5SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim5SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize5_RBV")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize5_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim5SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim6SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim6SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize6_RBV")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize6_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim6SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim7SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim7SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize7_RBV")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize7_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim7SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim8SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim8SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize8_RBV")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize8_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim8SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:Dim9SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:CAM:Dim9SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ArraySize9_RBV")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize9_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:CAM:Dim9SA_RBV")
}


record(mbbi, "BL03S-EA-FSCN-02:CAM:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "BL03S-EA-FSCN-02:CAM:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.CAM,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:CAM:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "BL03S-EA-FSCN-02:CAM:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "BL03S-EA-FSCN-02:CAM:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "BL03S-EA-FSCN-02:CAM:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.CAM,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "BL03S-EA-FSCN-02:CAM:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(FSCN2.CAM,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:CAM:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.CAM,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:CAM:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.CAM,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "BL03S-EA-FSCN-02:CAM:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.CAM,0,1)ARRAY_COUNTER")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.CAM,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "BL03S-EA-FSCN-02:CAM:ArrayRate_RBV")
{
    field(INPA, "BL03S-EA-FSCN-02:CAM:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "BL03S-EA-FSCN-02:CAM:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "BL03S-EA-FSCN-02:CAM:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "BL03S-EA-FSCN-02:CAM:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.CAM,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL03S-EA-FSCN-02:CAM:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.CAM,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "BL03S-EA-FSCN-02:CAM:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(FSCN2.CAM,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "BL03S-EA-FSCN-02:CAM:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(FSCN2.CAM,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "BL03S-EA-FSCN-02:CAM:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.CAM,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "BL03S-EA-FSCN-02:CAM:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "BL03S-EA-FSCN-02:CAM:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "BL03S-EA-FSCN-02:CAM:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "BL03S-EA-FSCN-02:CAM:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "BL03S-EA-FSCN-02:CAM:PoolFreeBuffers")
}

record(longin, "BL03S-EA-FSCN-02:CAM:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "BL03S-EA-FSCN-02:CAM:PoolUsedBuffers")
}

record(calc, "BL03S-EA-FSCN-02:CAM:PoolUsedBuffers")
{
    field(INPA, "BL03S-EA-FSCN-02:CAM:PoolAllocBuffers NPP MS")
    field(INPB, "BL03S-EA-FSCN-02:CAM:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "BL03S-EA-FSCN-02:CAM:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "BL03S-EA-FSCN-02:CAM:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:CAM:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)MAX_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:CAM:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)MAX_SIZE_Y")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the detector readout                     #
#  including binning, region start and size                       # 
###################################################################

record(longout, "BL03S-EA-FSCN-02:CAM:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)BIN_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-02:CAM:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)BIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-02:CAM:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)BIN_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-02:CAM:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)BIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-02:CAM:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)MIN_X")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-02:CAM:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)MIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-02:CAM:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)MIN_Y")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-02:CAM:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)MIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-02:CAM:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)SIZE_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-02:CAM:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-02:CAM:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)SIZE_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-02:CAM:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(bo, "BL03S-EA-FSCN-02:CAM:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "BL03S-EA-FSCN-02:CAM:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "BL03S-EA-FSCN-02:CAM:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "BL03S-EA-FSCN-02:CAM:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the acquisition time and                 #
#  period                                                         # 
###################################################################
record(ao, "BL03S-EA-FSCN-02:CAM:AcquireTime")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)ACQ_TIME")
   field(PREC, "3")
   field(VAL,  "1.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-02:CAM:AcquireTime_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)ACQ_TIME")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "BL03S-EA-FSCN-02:CAM:AcquirePeriod")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-02:CAM:AcquirePeriod_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ai, "BL03S-EA-FSCN-02:CAM:TimeRemaining_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)TIME_REMAINING")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the gain                                 # 
###################################################################
record(ao, "BL03S-EA-FSCN-02:CAM:Gain")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)GAIN")
   field(VAL,  "1.0")
   field(PREC, "3")
   info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-02:CAM:Gain_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)GAIN")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the frame type                           # 
###################################################################
record(mbbo, "BL03S-EA-FSCN-02:CAM:FrameType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:FrameType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the acquisition mode                     # 
###################################################################
record(mbbo, "BL03S-EA-FSCN-02:CAM:ImageMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(VAL,  "2")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:ImageMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the trigger mode                         # 
###################################################################
record(mbbo, "BL03S-EA-FSCN-02:CAM:TriggerMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the number of exposures and              #
#  number of images                                               # 
###################################################################
record(longout, "BL03S-EA-FSCN-02:CAM:NumExposures")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)NEXPOSURES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-02:CAM:NumExposures_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)NEXPOSURES")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:CAM:NumExposuresCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)NEXPOSURES_COUNTER")
   field(SCAN, "I/O Intr")
}
record(longout, "BL03S-EA-FSCN-02:CAM:NumImages")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)NIMAGES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-02:CAM:NumImages_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)NIMAGES")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:CAM:NumImagesCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)NIMAGES_COUNTER")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are for the detector state                       # 
###################################################################

record(mbbi, "BL03S-EA-FSCN-02:CAM:DetectorState_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.CAM,0,1)STATUS")
    field(ZRST, "Idle")
    field(ZRVL, "0")
    field(ZRSV, "NO_ALARM")
    field(ONST, "Acquire")
    field(ONVL, "1")
    field(ONSV, "NO_ALARM")
    field(TWST, "Readout")
    field(TWVL, "2")
    field(TWSV, "NO_ALARM")
    field(THST, "Correct")
    field(THVL, "3")
    field(THSV, "NO_ALARM")
    field(FRST, "Saving")
    field(FRVL, "4")
    field(FRSV, "NO_ALARM")
    field(FVST, "Aborting")
    field(FVVL, "5")
    field(FVSV, "MINOR")
    field(SXST, "Error")
    field(SXVL, "6")
    field(SXSV, "MAJOR")
    field(SVST, "Waiting")
    field(SVVL, "7")
    field(SVSV, "NO_ALARM")
    field(EIST, "Initializing")
    field(EIVL, "8")
    field(EISV, "NO_ALARM")
    field(NIST, "Disconnected")
    field(NIVL, "9")
    field(NISV, "INVALID")
    field(TEST, "Aborted")
    field(TEVL, "10")
    field(TESV, "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide status information                       # 
###################################################################

# Status message.
record(waveform, "BL03S-EA-FSCN-02:CAM:StatusMessage_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(FSCN2.CAM,0,1)STATUS_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "BL03S-EA-FSCN-02:CAM:StringToServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(FSCN2.CAM,0,1)STRING_TO_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "BL03S-EA-FSCN-02:CAM:StringFromServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(FSCN2.CAM,0,1)STRING_FROM_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

################################################################@###
#  This record can be used to force a read of the detector status  # 
####################################################################
record(bo,"BL03S-EA-FSCN-02:CAM:ReadStatus") {
    field(DTYP,"asynInt32")
    field(OUT, "@asyn(FSCN2.CAM,0,1)READ_STATUS")
    field(VAL, "1")
    field(SCAN,"Passive")
    info(autosaveFields, "SCAN")
}

###################################################################
#  These records control the shutter                              # 
###################################################################

record(mbbo, "BL03S-EA-FSCN-02:CAM:ShutterMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.CAM,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Detector output")
    field(TWVL, "2")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:ShutterMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.CAM,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Camera output")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

record(bo, "BL03S-EA-FSCN-02:CAM:ShutterControl")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.CAM,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(VAL,  "0")
}

record(bi, "BL03S-EA-FSCN-02:CAM:ShutterControl_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.CAM,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(SCAN, "I/O Intr")
}

record(bi, "BL03S-EA-FSCN-02:CAM:ShutterStatus_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.CAM,0,1)SHUTTER_STATUS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "BL03S-EA-FSCN-02:CAM:ShutterOpenDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-02:CAM:ShutterOpenDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "BL03S-EA-FSCN-02:CAM:ShutterCloseDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-02:CAM:ShutterCloseDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

# This record changes state when the driver opens/closes an EPICS shutter
record(bi, "BL03S-EA-FSCN-02:CAM:ShutterControlEPICS")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.CAM,0,1)SHUTTER_CONTROL_EPICS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
    field(FLNK, "BL03S-EA-FSCN-02:CAM:ShutterFanout.PROC")
}

record(fanout, "BL03S-EA-FSCN-02:CAM:ShutterFanout")
{
    field(LNK1, "BL03S-EA-FSCN-02:CAM:ShutterOpenEPICS.PROC PP MS")
    field(LNK2, "BL03S-EA-FSCN-02:CAM:ShutterCloseEPICS.PROC PP MS")
}

record(calcout, "BL03S-EA-FSCN-02:CAM:ShutterOpenEPICS")
{
    field(INPA, "BL03S-EA-FSCN-02:CAM:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(calcout, "BL03S-EA-FSCN-02:CAM:ShutterCloseEPICS")
{
    field(INPA, "BL03S-EA-FSCN-02:CAM:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "0")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:ShutterStatusEPICS_RBV")
{
    field(DTYP, "Raw Soft Channel")
    field(INP,  "test CP MS")
    field(ZRVL, "0")
    field(ZRST, "Closed")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "Open")
    field(ONSV, "MINOR")
    info(autosaveFields, "INP ZRVL ONVL")
}

###################################################################
#  These records control the detector temperature                 # 
###################################################################
 
record(ao, "BL03S-EA-FSCN-02:CAM:Temperature")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(VAL,  "25.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-02:CAM:Temperature_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}

record(ai, "BL03S-EA-FSCN-02:CAM:TemperatureActual")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)TEMPERATURE_ACTUAL")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}


###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
## These are the records from ADBase.template that we modify

# Some cameras use both AcquisitionFrameRate and AcquirePeriod.
# Make AcquirePeriod update if FrameRate is changed.
record(ao, "BL03S-EA-FSCN-02:CAM:AcquirePeriod")
{
   info(asyn:READBACK, "1")
}

# This record hides the fact that some cameras use FrameRate and some use FrameRateAbs
# This is not PINI=YES because AcquirePeriod is and they control the same thing
record(ao, "BL03S-EA-FSCN-02:CAM:FrameRate")
{
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(FSCN2.CAM 0)GC_FRAMERATE")
   field(PREC, "3")
}

record(ai, "BL03S-EA-FSCN-02:CAM:FrameRate_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM 0)GC_FRAMERATE")
   field(SCAN, "I/O Intr")
   field(PREC, "3")
}

# Some cameras (Basler, Point Grey, FLIR) use AcquisitionFrameRateEnable or AcquisitionFrameRateEnabled
# This record hides the fact that the feature name may differ; the record name is always the same.
record(bo, "BL03S-EA-FSCN-02:CAM:FrameRateEnable")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM 0)GC_FRAMERATE_ENABLE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "BL03S-EA-FSCN-02:CAM:FrameRateEnable_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM 0)GC_FRAMERATE_ENABLE")
   field(SCAN, "I/O Intr")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

# This record is used to ensure there is a record for TriggerSource even if there is no such GenICam feature
record(mbbo, "BL03S-EA-FSCN-02:CAM:TriggerSource")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM 0)GC_TRIGGER_SOURCE")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:TriggerSource_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM 0)GC_TRIGGER_SOURCE")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
   field(SCAN, "I/O Intr")
}

# This record is used to ensure there is a record for TriggerOverlap even if there is no such GenICam feature
record(mbbo, "BL03S-EA-FSCN-02:CAM:TriggerOverlap")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM 0)GC_TRIGGER_OVERLAP")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:TriggerOverlap_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM 0)GC_TRIGGER_OVERLAP")
   field(SCAN, "I/O Intr")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

# This record is used to ensure there is a record for TriggerSoftware even if there is no such GenICam feature
record(bo, "BL03S-EA-FSCN-02:CAM:TriggerSoftware")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM 0)GC_TRIGGER_SOFTWARE")
   field(ZNAM, "Done")
   field(ONAM, "Trigger")
}

# This record is used to ensure there is a record for ExposureMode even if there is no such GenICam feature
record(mbbo, "BL03S-EA-FSCN-02:CAM:ExposureMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM 0)GC_EXPOSURE_MODE")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:ExposureMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM 0)GC_EXPOSURE_MODE")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
   field(SCAN, "I/O Intr")
}

# This record is used to ensure there is a record for ExposureAuto even if there is no such GenICam feature
record(mbbo, "BL03S-EA-FSCN-02:CAM:ExposureAuto")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM 0)GC_EXPOSURE_AUTO")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:ExposureAuto_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM 0)GC_EXPOSURE_AUTO")
   field(SCAN, "I/O Intr")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

# This record is used to ensure there is a record for GainAuto even if there is no such GenICam feature
record(mbbo, "BL03S-EA-FSCN-02:CAM:GainAuto")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM 0)GC_GAIN_AUTO")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GainAuto_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM 0)GC_GAIN_AUTO")
   field(SCAN, "I/O Intr")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

# This record is used to ensure there is a record for PixelFormat even if there is no such GenICam feature
record(mbbo, "BL03S-EA-FSCN-02:CAM:PixelFormat")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM 0)GC_PIXEL_FORMAT")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:PixelFormat_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM 0)GC_PIXEL_FORMAT")
   field(ZRST, "N.A.")
   field(ZRVL, "0")
   field(SCAN, "I/O Intr")
}

record(ai, "BL03S-EA-FSCN-02:CAM:ARFramesCompleted")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)ARAVIS_COMPLETED")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC LLSV LOLO LOW LSV")
}

record(ai, "BL03S-EA-FSCN-02:CAM:ARFrameFailures")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)ARAVIS_FAILURES")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(ai, "BL03S-EA-FSCN-02:CAM:ARFrameUnderruns")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.CAM,0,1)ARAVIS_UNDERRUNS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ARMissingPackets")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)ARAVIS_MISSING_PKTS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(longin, "BL03S-EA-FSCN-02:CAM:ARResentPackets")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.CAM,0,1)ARAVIS_RESENT_PKTS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:ARPacketResendEnable")
{
   field(DESC, "Packet resend enable")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)ARAVIS_PKT_RESEND")
   field(ZRST, "Never")
   field(ZRVL, "0")
   field(ONST, "Always")
   field(ONVL, "1")
   field(VAL,  "1")
   field(PINI, "1")
   info(autosaveFields, "DESC ONSV ZRSV PINI VAL")
}

record(longout, "BL03S-EA-FSCN-02:CAM:ARPacketTimeout")
{
   field(DESC, "Delay in us before packet resend request")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)ARAVIS_PKT_TIMEOUT")
   field(VAL,  "20000")
   field(EGU,  "us")
   field(PINI, "1")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL")
}

record(longout, "BL03S-EA-FSCN-02:CAM:ARFrameRetention")
{
   field(DESC, "Frame timeout in us after last packet")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)ARAVIS_FRAME_RETENTION")
   field(VAL,  "100000")
   field(EGU,  "us")
   field(PINI, "1")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL")
}

record(longout, "BL03S-EA-FSCN-02:CAM:ARResetCamera")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)ARAVIS_RESET")
   field(FLNK, "BL03S-EA-FSCN-02:CAM:ARConnectCamera")
}

record(longout, "BL03S-EA-FSCN-02:CAM:ARConnectCamera")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.CAM,0,1)ARAVIS_CONNECTION")
   field(VAL, "1")
   field(PINI, "1")
}

record(calcout, "BL03S-EA-FSCN-02:CAM:ARCheckConnection")
{
   field(SCAN, "1 second")
   field(INPA, "BL03S-EA-FSCN-02:CAM:ARConnectCamera.SEVR CP")
   field(CALC, "A==0")
   field(OOPT, "When Non-zero")
   field(OUT,  "BL03S-EA-FSCN-02:CAM:ARConnectCamera.PROC PP")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:ARConvertPixelFormat_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)ARAVIS_CONVERT_PIXEL_FORMAT")
  field(ZRST, "Mono16Low")
  field(ZRVL, "0")
  field(ONST, "Mono16High")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}


## When unpacking Mono12Packed or Mono12p selects whether 16-bit output is 
## left shifted by 4 bits (Mono16High) or not (Mono16Low)
record(mbbo, "BL03S-EA-FSCN-02:CAM:ARConvertPixelFormat") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)ARAVIS_CONVERT_PIXEL_FORMAT")
  field(ZRST, "Mono16Low")
  field(ZRVL, "0")
  field(ONST, "Mono16High")
  field(ONVL, "1")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}


record(mbbi, "BL03S-EA-FSCN-02:CAM:ARShiftDir_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)ARAVIS_SHIFT_DIR")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Left")
  field(ONVL, "1")
  field(TWST, "Right")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## Select no shift, left shift, or right shift when reading data 
record(mbbo, "BL03S-EA-FSCN-02:CAM:ARShiftDir") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)ARAVIS_SHIFT_DIR")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Left")
  field(ONVL, "1")
  field(TWST, "Right")
  field(TWVL, "2")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:ARShiftBits_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn(FSCN2.CAM,0,1)ARAVIS_SHIFT_BITS")
  field(ZRST, "1")
  field(ZRVL, "1")
  field(ONST, "2")
  field(ONVL, "2")
  field(TWST, "3")
  field(TWVL, "3")
  field(THST, "4")
  field(THVL, "4")
  field(FRST, "5")
  field(FRVL, "5")
  field(FVST, "6")
  field(FVVL, "6")
  field(SXST, "7")
  field(SXVL, "7")
  field(SVST, "8")
  field(SVVL, "8")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## Selects how many bits to shift left or right when reading data 
record(mbbo, "BL03S-EA-FSCN-02:CAM:ARShiftBits") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn(FSCN2.CAM,0,1)ARAVIS_SHIFT_BITS")
  field(ZRST, "1")
  field(ZRVL, "1")
  field(ONST, "2")
  field(ONVL, "2")
  field(TWST, "3")
  field(TWVL, "3")
  field(THST, "4")
  field(THVL, "4")
  field(FRST, "5")
  field(FRVL, "5")
  field(FVST, "6")
  field(FVVL, "6")
  field(SXST, "7")
  field(SXVL, "7")
  field(SVST, "8")
  field(SVVL, "8")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_ExpAutoTarget_RBV") {
    alias("BL03S-EA-FSCN-01:CAM:ExposureAutoTarg_RBV")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_ExpAutoTarget") {
    alias("BL03S-EA-FSCN-01:CAM:ExposureAutoTarg")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_GainAutoTarget_RBV") {
    alias("BL03S-EA-FSCN-01:CAM:GainAutoTarget_RBV")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_GainAutoTarget") {
    alias("BL03S-EA-FSCN-01:CAM:GainAutoTarget")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_BalRatioSelector_RBV") {
    alias("BL03S-EA-FSCN-01:CAM:BalanceRatioSele_RBV")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_BalRatioSelector") {
    alias("BL03S-EA-FSCN-01:CAM:BalanceRatioSele")
}

record(ai, "BL03S-EA-FSCN-01:CAM:GC_BalanceRatioAbs_RBV") {
    alias("BL03S-EA-FSCN-01:CAM:BalanceRatioAbs_RBV")
}

record(ao, "BL03S-EA-FSCN-01:CAM:GC_BalanceRatioAbs") {
    alias("BL03S-EA-FSCN-01:CAM:BalanceRatioAbs")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:GC_BalanceWhiteAuto_RBV") {
    alias("BL03S-EA-FSCN-01:CAM:BalanceWhiteAut0_RBV")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:GC_BalanceWhiteAuto") {
    alias("BL03S-EA-FSCN-01:CAM:BalanceWhiteAut0")
}

record(ai, "BL03S-EA-FSCN-01:CAM:ARFramesCompleted")
{
    alias("BL03S-EA-FSCN-01:CAM:COMPLETED_RBV")
}

record(ai, "BL03S-EA-FSCN-01:CAM:ARFrameFailures")
{
    alias("BL03S-EA-FSCN-01:CAM:FAILURES_RBV")
}

record(ai, "BL03S-EA-FSCN-01:CAM:ARFrameUnderruns")
{
    alias("BL03S-EA-FSCN-01:CAM:UNDERRUNS_RBV")
}

record(longout, "BL03S-EA-FSCN-01:CAM:ARResetCamera")
{
    alias("BL03S-EA-FSCN-01:CAM:RESET")
}

record(mbbi, "BL03S-EA-FSCN-01:CAM:ARLeftShift_RBV") {
    alias("BL03S-EA-FSCN-01:CAM:LEFTSHIFT_RBV")
}

record(mbbo, "BL03S-EA-FSCN-01:CAM:ARLeftShift") {
    alias("BL03S-EA-FSCN-01:CAM:LEFTSHIFT")
}

record(bi, "BL03S-EA-FSCN-01:CAM:ARHWImageMode_RBV") {
    alias("BL03S-EA-FSCN-01:CAM:HWIMAGEMODE_RBV")
}

record(bo, "BL03S-EA-FSCN-01:CAM:ARHWImageMode") {
    alias("BL03S-EA-FSCN-01:CAM:HWIMAGEMODE")
}
# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix


record(ai, "BL03S-EA-FSCN-02:CAM:GC_ExpAutoTarget_RBV") {
    alias("BL03S-EA-FSCN-02:CAM:ExposureAutoTarg_RBV")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_ExpAutoTarget") {
    alias("BL03S-EA-FSCN-02:CAM:ExposureAutoTarg")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_GainAutoTarget_RBV") {
    alias("BL03S-EA-FSCN-02:CAM:GainAutoTarget_RBV")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_GainAutoTarget") {
    alias("BL03S-EA-FSCN-02:CAM:GainAutoTarget")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_BalRatioSelector_RBV") {
    alias("BL03S-EA-FSCN-02:CAM:BalanceRatioSele_RBV")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_BalRatioSelector") {
    alias("BL03S-EA-FSCN-02:CAM:BalanceRatioSele")
}

record(ai, "BL03S-EA-FSCN-02:CAM:GC_BalanceRatioAbs_RBV") {
    alias("BL03S-EA-FSCN-02:CAM:BalanceRatioAbs_RBV")
}

record(ao, "BL03S-EA-FSCN-02:CAM:GC_BalanceRatioAbs") {
    alias("BL03S-EA-FSCN-02:CAM:BalanceRatioAbs")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:GC_BalanceWhiteAuto_RBV") {
    alias("BL03S-EA-FSCN-02:CAM:BalanceWhiteAut0_RBV")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:GC_BalanceWhiteAuto") {
    alias("BL03S-EA-FSCN-02:CAM:BalanceWhiteAut0")
}

record(ai, "BL03S-EA-FSCN-02:CAM:ARFramesCompleted")
{
    alias("BL03S-EA-FSCN-02:CAM:COMPLETED_RBV")
}

record(ai, "BL03S-EA-FSCN-02:CAM:ARFrameFailures")
{
    alias("BL03S-EA-FSCN-02:CAM:FAILURES_RBV")
}

record(ai, "BL03S-EA-FSCN-02:CAM:ARFrameUnderruns")
{
    alias("BL03S-EA-FSCN-02:CAM:UNDERRUNS_RBV")
}

record(longout, "BL03S-EA-FSCN-02:CAM:ARResetCamera")
{
    alias("BL03S-EA-FSCN-02:CAM:RESET")
}

record(mbbi, "BL03S-EA-FSCN-02:CAM:ARLeftShift_RBV") {
    alias("BL03S-EA-FSCN-02:CAM:LEFTSHIFT_RBV")
}

record(mbbo, "BL03S-EA-FSCN-02:CAM:ARLeftShift") {
    alias("BL03S-EA-FSCN-02:CAM:LEFTSHIFT")
}

record(bi, "BL03S-EA-FSCN-02:CAM:ARHWImageMode_RBV") {
    alias("BL03S-EA-FSCN-02:CAM:HWIMAGEMODE_RBV")
}

record(bo, "BL03S-EA-FSCN-02:CAM:ARHWImageMode") {
    alias("BL03S-EA-FSCN-02:CAM:HWIMAGEMODE")
}
# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix



#=================================================================#
# Template file: NDPva.template
# Database for the records specific to the pvAccess plugin
# Bruno Martins
# May 5, 2015

#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, ADDR, Asyn Port address
#% macro, TIMEOUT, Asyn timeout

# This associates the template with an edm screen
# % gui, FSCN1.pva, edmtab, NDPvaPlugin.edl, P=BL03S-EA-FSCN-01,R=:PVA:

# This associates a BOY screen with the template
# % gui, FSCN1.pva, boydetail,ADApp_opi/dls/pva_detail.opi, P=BL03S-EA-FSCN-01, R=:PVA:, DESC=PVAccess
# % gui, FSCN1.pva, boyembed, ADApp_opi/dls/pva_embed_box.opi, P=BL03S-EA-FSCN-01, R=:PVA:, DESC=PVAccess
# % gui, FSCN1.pva, boyembed, ADApp_opi/dls/pva_embed.opi, P=BL03S-EA-FSCN-01, R=:PVA:, DESC=PVAccess

# Info
# % gui, FSCN1.pva, groupHeading, Info
# % gui, FSCN1.pva, readback, Port name,   BL03S-EA-FSCN-01:PVA:PortName_RBV
# % gui, FSCN1.pva, readback, Plugin type,   BL03S-EA-FSCN-01:PVA:PluginType_RBV
# Input
# % gui, FSCN1.pva, demandString, Input,   BL03S-EA-FSCN-01:PVA:NDArrayPort
# % gui, FSCN1.pva, readback, Input,   BL03S-EA-FSCN-01:PVA:NDArrayPort_RBV

# % gui, FSCN1.pva, groupHeading, Callback
# % gui, FSCN1.pva, enum, Callbacks,   BL03S-EA-FSCN-01:PVA:EnableCallbacks
# % gui, FSCN1.pva, statusbits, Callbacks,   BL03S-EA-FSCN-01:PVA:EnableCallbacks_RBV
# % gui, FSCN1.pva, demand, Min Callback Time,   BL03S-EA-FSCN-01:PVA:MinCallbackTime
# % gui, FSCN1.pva, readback, Min Callback Time,   BL03S-EA-FSCN-01:PVA:MinCallbackTime_RBV
# % gui, FSCN1.pva, enum, Block Callbacks,   BL03S-EA-FSCN-01:PVA:BlockingCallbacks
# % gui, FSCN1.pva, statusbits, Block Callbacks,   BL03S-EA-FSCN-01:PVA:BlockingCallbacks_RBV

# % gui, FSCN1.pva, groupHeading, Counters
# % gui, FSCN1.pva, demand, Array Counter,   BL03S-EA-FSCN-01:PVA:ArrayCounter
# % gui, FSCN1.pva, readback, Array Counter,   BL03S-EA-FSCN-01:PVA:ArrayCounter_RBV
# % gui, FSCN1.pva, readback, Array Rate (fps),   BL03S-EA-FSCN-01:PVA:ArrayRate_RBV
# % gui, FSCN1.pva, readback, Queue Use,   BL03S-EA-FSCN-01:PVA:QueueUse
# % gui, FSCN1.pva, readback, Queue Size,   BL03S-EA-FSCN-01:PVA:QueueSize
# % gui, FSCN1.pva, demand, Dropped Arrays,   BL03S-EA-FSCN-01:PVA:DroppedArrays
# % gui, FSCN1.pva, readback, Dropped Arrays,   BL03S-EA-FSCN-01:PVA:DroppedArrays_RBV

# % gui, FSCN1.pva, groupHeading, Array Settings
# % gui, FSCN1.pva, readback, Num Dimensions,   BL03S-EA-FSCN-01:PVA:NDimensions_RBV
# % gui, FSCN1.pva, readback, Dim 0 Size,   BL03S-EA-FSCN-01:PVA:ArraySize0_RBV
# % gui, FSCN1.pva, readback, Dim 1 Size,   BL03S-EA-FSCN-01:PVA:ArraySize1_RBV
# % gui, FSCN1.pva, readback, Dim 2 Size,   BL03S-EA-FSCN-01:PVA:ArraySize2_RBV
# % gui, FSCN1.pva, readback, Input Data Type,   BL03S-EA-FSCN-01:PVA:DataType_RBV
# % gui, FSCN1.pva, readback, Colour Mode,   BL03S-EA-FSCN-01:PVA:ColorMode_RBV
# % gui, FSCN1.pva, readback, Bayer Pattern,   BL03S-EA-FSCN-01:PVA:BayerPattern_RBV
# % gui, FSCN1.pva, readback, Unique id,   BL03S-EA-FSCN-01:PVA:UniqueId_RBV
# % gui, FSCN1.pva, readback, Timestamp,   BL03S-EA-FSCN-01:PVA:TimeStamp_RBV

# % gui, FSCN1.pva, groupHeading, PVA Settings
# % gui, FSCN1.pva, readback, PV Name,   BL03S-EA-FSCN-01:PVA:PvName_RBV

#=================================================================#
# Template file: NDPluginBase.template
# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, NDARRAY_PORT, Input Array Port
# % macro, NDARRAY_ADDR, Input Array Address
# % macro, ENABLED, Plugin Enabled at startup?
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "BL03S-EA-FSCN-01:PVA:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.pva,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "BL03S-EA-FSCN-01:PVA:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.pva,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "BL03S-EA-FSCN-01:PVA:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.pva,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "BL03S-EA-FSCN-01:PVA:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.pva,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-01:PVA:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.pva,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-01:PVA:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.pva,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-01:PVA:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.pva,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-01:PVA:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.pva,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "BL03S-EA-FSCN-01:PVA:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(FSCN1.pva,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "BL03S-EA-FSCN-01:PVA:SetAcquireBusy")
   info(ai:READBACK, "1")
}

record(bi, "BL03S-EA-FSCN-01:PVA:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(FSCN1.pva,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL03S-EA-FSCN-01:PVA:SetAcquireBusy")
{
    field(INPA, "BL03S-EA-FSCN-01:PVA:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "BL03S-EA-FSCN-01:PVA:AcquireBusy PP")
}

record(bi, "BL03S-EA-FSCN-01:PVA:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "BL03S-EA-FSCN-01:PVA:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(FSCN1.pva,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL03S-EA-FSCN-01:PVA:ClearAcquireBusy") {
    field(INPA, "BL03S-EA-FSCN-01:PVA:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "BL03S-EA-FSCN-01:PVA:AcquireBusy PP")
}

record(bo, "BL03S-EA-FSCN-01:PVA:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(FSCN1.pva,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "BL03S-EA-FSCN-01:PVA:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "BL03S-EA-FSCN-01:PVA:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "BL03S-EA-FSCN-01:PVA:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(FSCN1.pva,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim0SA")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim0SA")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize0")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize0")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim0SA")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim1SA")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim1SA")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize1")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize1")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim1SA")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim2SA")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim2SA")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize2")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize2")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim2SA")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim3SA")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim3SA")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize3")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize3")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim3SA")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim4SA")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim4SA")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize4")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize4")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim4SA")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim5SA")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim5SA")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize5")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize5")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim5SA")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim6SA")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim6SA")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize6")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize6")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim6SA")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim7SA")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim7SA")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize7")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize7")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim7SA")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim8SA")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim8SA")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize8")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize8")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim8SA")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim9SA")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim9SA")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize9")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize9")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim9SA")
}


record(waveform, "BL03S-EA-FSCN-01:PVA:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(FSCN1.pva,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim0SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize0_RBV")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize0_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim0SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim1SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim1SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize1_RBV")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize1_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim1SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim2SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim2SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize2_RBV")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize2_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim2SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim3SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim3SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize3_RBV")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize3_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim3SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim4SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim4SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize4_RBV")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize4_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim4SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim5SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim5SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize5_RBV")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize5_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim5SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim6SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim6SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize6_RBV")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize6_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim6SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim7SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim7SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize7_RBV")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize7_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim7SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim8SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim8SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize8_RBV")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize8_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim8SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:Dim9SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-01:PVA:Dim9SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:ArraySize9_RBV")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize9_RBV")
{
    field(INP,  "BL03S-EA-FSCN-01:PVA:Dim9SA_RBV")
}


record(mbbi, "BL03S-EA-FSCN-01:PVA:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.pva,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.pva,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.pva,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.pva,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.pva,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "BL03S-EA-FSCN-01:PVA:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.pva,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:PVA:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.pva,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "BL03S-EA-FSCN-01:PVA:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.pva,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-01:PVA:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.pva,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "BL03S-EA-FSCN-01:PVA:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.pva,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-01:PVA:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.pva,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "BL03S-EA-FSCN-01:PVA:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "BL03S-EA-FSCN-01:PVA:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(FSCN1.pva,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:PVA:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:PVA:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "BL03S-EA-FSCN-01:PVA:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)ARRAY_COUNTER")
}

record(longin, "BL03S-EA-FSCN-01:PVA:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "BL03S-EA-FSCN-01:PVA:ArrayRate_RBV")
{
    field(INPA, "BL03S-EA-FSCN-01:PVA:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "BL03S-EA-FSCN-01:PVA:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "BL03S-EA-FSCN-01:PVA:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "BL03S-EA-FSCN-01:PVA:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL03S-EA-FSCN-01:PVA:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "BL03S-EA-FSCN-01:PVA:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(FSCN1.pva,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "BL03S-EA-FSCN-01:PVA:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(FSCN1.pva,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "BL03S-EA-FSCN-01:PVA:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "BL03S-EA-FSCN-01:PVA:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.pva,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "BL03S-EA-FSCN-01:PVA:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN1.pva,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "BL03S-EA-FSCN-01:PVA:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "BL03S-EA-FSCN-01:PVA:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.pva,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "BL03S-EA-FSCN-01:PVA:PoolFreeBuffers")
}

record(longin, "BL03S-EA-FSCN-01:PVA:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.pva,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "BL03S-EA-FSCN-01:PVA:PoolUsedBuffers")
}

record(calc, "BL03S-EA-FSCN-01:PVA:PoolUsedBuffers")
{
    field(INPA, "BL03S-EA-FSCN-01:PVA:PoolAllocBuffers NPP MS")
    field(INPB, "BL03S-EA-FSCN-01:PVA:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "BL03S-EA-FSCN-01:PVA:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN1.pva,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "BL03S-EA-FSCN-01:PVA:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN1.pva,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "BL03S-EA-FSCN-01:PVA:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN1.pva,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "BL03S-EA-FSCN-01:PVA:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(FSCN1.pva,0,1)NDARRAY_PORT")
    field(VAL,  "FSCN1.CAM")
    info(autosaveFields, "VAL")
}

record(stringin, "BL03S-EA-FSCN-01:PVA:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(FSCN1.pva,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-01:PVA:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-01:PVA:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "BL03S-EA-FSCN-01:PVA:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL03S-EA-FSCN-01:PVA:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "BL03S-EA-FSCN-01:PVA:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(FSCN1.pva,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-01:PVA:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(FSCN1.pva,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "BL03S-EA-FSCN-01:PVA:MaxArrayRate")
{
    field(DTYP, "Soft Channel")
    field(OUT,  "BL03S-EA-FSCN-01:PVA:MaxArrayRate_COUT PP")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(VAL,  "0.0")
    info(autosaveFields, "VAL")
}

record(calcout, "BL03S-EA-FSCN-01:PVA:MaxArrayRate_COUT")
{
    field(INPA, "BL03S-EA-FSCN-01:PVA:MaxArrayRate")
    field(CALC, "A=0?0:1.0/A")
    field(OUT,  "BL03S-EA-FSCN-01:PVA:MinCallbackTime PP")
}

record(calc, "BL03S-EA-FSCN-01:PVA:MaxArrayRate_RBV")
{
    field(INPA, "BL03S-EA-FSCN-01:PVA:MinCallbackTime_RBV CP")
    field(CALC, "A=0?0:1.0/A")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(SCAN, "Passive")
}

record(ao, "BL03S-EA-FSCN-01:PVA:MaxByteRate")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(FSCN1.pva,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-01:PVA:MaxByteRate_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(FSCN1.pva,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the last execution time of the plugin     #
###################################################################
record(ai, "BL03S-EA-FSCN-01:PVA:ExecutionTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(FSCN1.pva,0,1)EXECUTION_TIME")
    field(EGU,  "ms")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record requests that the plugin execute again with the    #
#  same NDArray                                                   #
###################################################################
record(bo, "BL03S-EA-FSCN-01:PVA:ProcessPlugin")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)PROCESS_PLUGIN")
    field(VAL,  "1")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "BL03S-EA-FSCN-01:PVA:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "BL03S-EA-FSCN-01:PVA:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


record(longout, "BL03S-EA-FSCN-01:PVA:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "BL03S-EA-FSCN-01:PVA:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-01:PVA:QueueSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)QUEUE_SIZE")
    field(PINI, "YES")
}

record(longin, "BL03S-EA-FSCN-01:PVA:QueueSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)QUEUE_SIZE")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:QueueFreeLow")
    field(SCAN, "I/O Intr")
}

record(calcout, "BL03S-EA-FSCN-01:PVA:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "BL03S-EA-FSCN-01:PVA:QueueSize")
    field(OUT,  "BL03S-EA-FSCN-01:PVA:QueueFree.LOW")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "BL03S-EA-FSCN-01:PVA:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "BL03S-EA-FSCN-01:PVA:QueueSize")
   field(OUT,  "BL03S-EA-FSCN-01:PVA:QueueUse.HIGH")
   field(FLNK, "BL03S-EA-FSCN-01:PVA:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "BL03S-EA-FSCN-01:PVA:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "BL03S-EA-FSCN-01:PVA:QueueSize")
   field(OUT,  "BL03S-EA-FSCN-01:PVA:QueueUse.HIHI")
}

record(longin, "BL03S-EA-FSCN-01:PVA:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "BL03S-EA-FSCN-01:PVA:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "BL03S-EA-FSCN-01:PVA:QueueSize")
    field(INPB, "BL03S-EA-FSCN-01:PVA:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}

record(longout, "BL03S-EA-FSCN-01:PVA:NumThreads")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)NUM_THREADS")
    field(VAL,  "1")
    field(PINI, "YES")
}

record(longin, "BL03S-EA-FSCN-01:PVA:NumThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)NUM_THREADS")
    field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:PVA:MaxThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)MAX_THREADS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control output array sorting                     #
###################################################################
record(mbbo, "BL03S-EA-FSCN-01:PVA:SortMode") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
}

record(mbbi, "BL03S-EA-FSCN-01:PVA:SortMode_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
    field(SCAN, "I/O Intr")
}

record(ao, "BL03S-EA-FSCN-01:PVA:SortTime") {
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(FSCN1.pva,0,1)SORT_TIME")
    field(PREC, "3")
    field(VAL, "0.1")
}

record(ai, "BL03S-EA-FSCN-01:PVA:SortTime_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(FSCN1.pva,0,1)SORT_TIME")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-01:PVA:SortSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)SORT_SIZE")
    field(VAL,  "20")
    field(PINI, "YES")
}

record(longin, "BL03S-EA-FSCN-01:PVA:SortSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)SORT_SIZE")
    field(FLNK, "BL03S-EA-FSCN-01:PVA:SortFreeLow")
    field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-01:PVA:SortFree") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)SORT_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

record(calcout, "BL03S-EA-FSCN-01:PVA:SortFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "BL03S-EA-FSCN-01:PVA:SortSize")
    field(OUT,  "BL03S-EA-FSCN-01:PVA:SortFree.LOW")
}

record(longout, "BL03S-EA-FSCN-01:PVA:DroppedOutputArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)DROPPED_OUTPUT_ARRAYS")
    field(VAL,  "0")
}

record(longin, "BL03S-EA-FSCN-01:PVA:DroppedOutputArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)DROPPED_OUTPUT_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-01:PVA:DisorderedArrays")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN1.pva,0,1)DISORDERED_ARRAYS")
    field(PINI, "YES")
}

record(longin, "BL03S-EA-FSCN-01:PVA:DisorderedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN1.pva,0,1)DISORDERED_ARRAYS")
    field(SCAN, "I/O Intr")
}



###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default

record(waveform, "BL03S-EA-FSCN-01:PVA:PvName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(FSCN1.pva,0,1)PV_NAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}
#=================================================================#
# Template file: NDPva.template
# Database for the records specific to the pvAccess plugin
# Bruno Martins
# May 5, 2015

#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, ADDR, Asyn Port address
#% macro, TIMEOUT, Asyn timeout

# This associates the template with an edm screen
# % gui, FSCN2.pva, edmtab, NDPvaPlugin.edl, P=BL03S-EA-FSCN-02,R=:PVA:

# This associates a BOY screen with the template
# % gui, FSCN2.pva, boydetail,ADApp_opi/dls/pva_detail.opi, P=BL03S-EA-FSCN-02, R=:PVA:, DESC=PVAccess
# % gui, FSCN2.pva, boyembed, ADApp_opi/dls/pva_embed_box.opi, P=BL03S-EA-FSCN-02, R=:PVA:, DESC=PVAccess
# % gui, FSCN2.pva, boyembed, ADApp_opi/dls/pva_embed.opi, P=BL03S-EA-FSCN-02, R=:PVA:, DESC=PVAccess

# Info
# % gui, FSCN2.pva, groupHeading, Info
# % gui, FSCN2.pva, readback, Port name,   BL03S-EA-FSCN-02:PVA:PortName_RBV
# % gui, FSCN2.pva, readback, Plugin type,   BL03S-EA-FSCN-02:PVA:PluginType_RBV
# Input
# % gui, FSCN2.pva, demandString, Input,   BL03S-EA-FSCN-02:PVA:NDArrayPort
# % gui, FSCN2.pva, readback, Input,   BL03S-EA-FSCN-02:PVA:NDArrayPort_RBV

# % gui, FSCN2.pva, groupHeading, Callback
# % gui, FSCN2.pva, enum, Callbacks,   BL03S-EA-FSCN-02:PVA:EnableCallbacks
# % gui, FSCN2.pva, statusbits, Callbacks,   BL03S-EA-FSCN-02:PVA:EnableCallbacks_RBV
# % gui, FSCN2.pva, demand, Min Callback Time,   BL03S-EA-FSCN-02:PVA:MinCallbackTime
# % gui, FSCN2.pva, readback, Min Callback Time,   BL03S-EA-FSCN-02:PVA:MinCallbackTime_RBV
# % gui, FSCN2.pva, enum, Block Callbacks,   BL03S-EA-FSCN-02:PVA:BlockingCallbacks
# % gui, FSCN2.pva, statusbits, Block Callbacks,   BL03S-EA-FSCN-02:PVA:BlockingCallbacks_RBV

# % gui, FSCN2.pva, groupHeading, Counters
# % gui, FSCN2.pva, demand, Array Counter,   BL03S-EA-FSCN-02:PVA:ArrayCounter
# % gui, FSCN2.pva, readback, Array Counter,   BL03S-EA-FSCN-02:PVA:ArrayCounter_RBV
# % gui, FSCN2.pva, readback, Array Rate (fps),   BL03S-EA-FSCN-02:PVA:ArrayRate_RBV
# % gui, FSCN2.pva, readback, Queue Use,   BL03S-EA-FSCN-02:PVA:QueueUse
# % gui, FSCN2.pva, readback, Queue Size,   BL03S-EA-FSCN-02:PVA:QueueSize
# % gui, FSCN2.pva, demand, Dropped Arrays,   BL03S-EA-FSCN-02:PVA:DroppedArrays
# % gui, FSCN2.pva, readback, Dropped Arrays,   BL03S-EA-FSCN-02:PVA:DroppedArrays_RBV

# % gui, FSCN2.pva, groupHeading, Array Settings
# % gui, FSCN2.pva, readback, Num Dimensions,   BL03S-EA-FSCN-02:PVA:NDimensions_RBV
# % gui, FSCN2.pva, readback, Dim 0 Size,   BL03S-EA-FSCN-02:PVA:ArraySize0_RBV
# % gui, FSCN2.pva, readback, Dim 1 Size,   BL03S-EA-FSCN-02:PVA:ArraySize1_RBV
# % gui, FSCN2.pva, readback, Dim 2 Size,   BL03S-EA-FSCN-02:PVA:ArraySize2_RBV
# % gui, FSCN2.pva, readback, Input Data Type,   BL03S-EA-FSCN-02:PVA:DataType_RBV
# % gui, FSCN2.pva, readback, Colour Mode,   BL03S-EA-FSCN-02:PVA:ColorMode_RBV
# % gui, FSCN2.pva, readback, Bayer Pattern,   BL03S-EA-FSCN-02:PVA:BayerPattern_RBV
# % gui, FSCN2.pva, readback, Unique id,   BL03S-EA-FSCN-02:PVA:UniqueId_RBV
# % gui, FSCN2.pva, readback, Timestamp,   BL03S-EA-FSCN-02:PVA:TimeStamp_RBV

# % gui, FSCN2.pva, groupHeading, PVA Settings
# % gui, FSCN2.pva, readback, PV Name,   BL03S-EA-FSCN-02:PVA:PvName_RBV

#=================================================================#
# Template file: NDPluginBase.template
# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, NDARRAY_PORT, Input Array Port
# % macro, NDARRAY_ADDR, Input Array Address
# % macro, ENABLED, Plugin Enabled at startup?
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "BL03S-EA-FSCN-02:PVA:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.pva,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "BL03S-EA-FSCN-02:PVA:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.pva,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "BL03S-EA-FSCN-02:PVA:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.pva,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "BL03S-EA-FSCN-02:PVA:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.pva,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-02:PVA:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.pva,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-02:PVA:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.pva,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-02:PVA:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.pva,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL03S-EA-FSCN-02:PVA:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.pva,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "BL03S-EA-FSCN-02:PVA:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(FSCN2.pva,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "BL03S-EA-FSCN-02:PVA:SetAcquireBusy")
   info(ai:READBACK, "1")
}

record(bi, "BL03S-EA-FSCN-02:PVA:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(FSCN2.pva,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL03S-EA-FSCN-02:PVA:SetAcquireBusy")
{
    field(INPA, "BL03S-EA-FSCN-02:PVA:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "BL03S-EA-FSCN-02:PVA:AcquireBusy PP")
}

record(bi, "BL03S-EA-FSCN-02:PVA:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "BL03S-EA-FSCN-02:PVA:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(FSCN2.pva,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL03S-EA-FSCN-02:PVA:ClearAcquireBusy") {
    field(INPA, "BL03S-EA-FSCN-02:PVA:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "BL03S-EA-FSCN-02:PVA:AcquireBusy PP")
}

record(bo, "BL03S-EA-FSCN-02:PVA:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(FSCN2.pva,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "BL03S-EA-FSCN-02:PVA:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "BL03S-EA-FSCN-02:PVA:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "BL03S-EA-FSCN-02:PVA:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(FSCN2.pva,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim0SA")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim0SA")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize0")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize0")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim0SA")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim1SA")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim1SA")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize1")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize1")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim1SA")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim2SA")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim2SA")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize2")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize2")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim2SA")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim3SA")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim3SA")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize3")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize3")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim3SA")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim4SA")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim4SA")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize4")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize4")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim4SA")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim5SA")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim5SA")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize5")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize5")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim5SA")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim6SA")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim6SA")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize6")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize6")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim6SA")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim7SA")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim7SA")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize7")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize7")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim7SA")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim8SA")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim8SA")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize8")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize8")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim8SA")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim9SA")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim9SA")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize9")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize9")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim9SA")
}


record(waveform, "BL03S-EA-FSCN-02:PVA:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(FSCN2.pva,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim0SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize0_RBV")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize0_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim0SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim1SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim1SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize1_RBV")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize1_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim1SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim2SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim2SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize2_RBV")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize2_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim2SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim3SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim3SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize3_RBV")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize3_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim3SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim4SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim4SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize4_RBV")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize4_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim4SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim5SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim5SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize5_RBV")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize5_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim5SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim6SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim6SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize6_RBV")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize6_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim6SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim7SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim7SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize7_RBV")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize7_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim7SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim8SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim8SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize8_RBV")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize8_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim8SA_RBV")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:Dim9SA_RBV")
}

record(subArray, "BL03S-EA-FSCN-02:PVA:Dim9SA_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:ArraySize9_RBV")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize9_RBV")
{
    field(INP,  "BL03S-EA-FSCN-02:PVA:Dim9SA_RBV")
}


record(mbbi, "BL03S-EA-FSCN-02:PVA:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.pva,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.pva,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.pva,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.pva,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.pva,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "BL03S-EA-FSCN-02:PVA:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.pva,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:PVA:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.pva,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "BL03S-EA-FSCN-02:PVA:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.pva,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-02:PVA:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.pva,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "BL03S-EA-FSCN-02:PVA:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.pva,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL03S-EA-FSCN-02:PVA:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.pva,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "BL03S-EA-FSCN-02:PVA:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "BL03S-EA-FSCN-02:PVA:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(FSCN2.pva,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:PVA:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:PVA:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "BL03S-EA-FSCN-02:PVA:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)ARRAY_COUNTER")
}

record(longin, "BL03S-EA-FSCN-02:PVA:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "BL03S-EA-FSCN-02:PVA:ArrayRate_RBV")
{
    field(INPA, "BL03S-EA-FSCN-02:PVA:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "BL03S-EA-FSCN-02:PVA:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "BL03S-EA-FSCN-02:PVA:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "BL03S-EA-FSCN-02:PVA:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL03S-EA-FSCN-02:PVA:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "BL03S-EA-FSCN-02:PVA:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(FSCN2.pva,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "BL03S-EA-FSCN-02:PVA:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(FSCN2.pva,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "BL03S-EA-FSCN-02:PVA:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "BL03S-EA-FSCN-02:PVA:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.pva,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "BL03S-EA-FSCN-02:PVA:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(FSCN2.pva,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "BL03S-EA-FSCN-02:PVA:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "BL03S-EA-FSCN-02:PVA:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.pva,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "BL03S-EA-FSCN-02:PVA:PoolFreeBuffers")
}

record(longin, "BL03S-EA-FSCN-02:PVA:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.pva,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "BL03S-EA-FSCN-02:PVA:PoolUsedBuffers")
}

record(calc, "BL03S-EA-FSCN-02:PVA:PoolUsedBuffers")
{
    field(INPA, "BL03S-EA-FSCN-02:PVA:PoolAllocBuffers NPP MS")
    field(INPB, "BL03S-EA-FSCN-02:PVA:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "BL03S-EA-FSCN-02:PVA:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(FSCN2.pva,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "BL03S-EA-FSCN-02:PVA:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(FSCN2.pva,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "BL03S-EA-FSCN-02:PVA:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(FSCN2.pva,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "BL03S-EA-FSCN-02:PVA:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(FSCN2.pva,0,1)NDARRAY_PORT")
    field(VAL,  "FSCN2.CAM")
    info(autosaveFields, "VAL")
}

record(stringin, "BL03S-EA-FSCN-02:PVA:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(FSCN2.pva,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-02:PVA:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(longin, "BL03S-EA-FSCN-02:PVA:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "BL03S-EA-FSCN-02:PVA:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL03S-EA-FSCN-02:PVA:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "BL03S-EA-FSCN-02:PVA:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(FSCN2.pva,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-02:PVA:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(FSCN2.pva,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "BL03S-EA-FSCN-02:PVA:MaxArrayRate")
{
    field(DTYP, "Soft Channel")
    field(OUT,  "BL03S-EA-FSCN-02:PVA:MaxArrayRate_COUT PP")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(VAL,  "0.0")
    info(autosaveFields, "VAL")
}

record(calcout, "BL03S-EA-FSCN-02:PVA:MaxArrayRate_COUT")
{
    field(INPA, "BL03S-EA-FSCN-02:PVA:MaxArrayRate")
    field(CALC, "A=0?0:1.0/A")
    field(OUT,  "BL03S-EA-FSCN-02:PVA:MinCallbackTime PP")
}

record(calc, "BL03S-EA-FSCN-02:PVA:MaxArrayRate_RBV")
{
    field(INPA, "BL03S-EA-FSCN-02:PVA:MinCallbackTime_RBV CP")
    field(CALC, "A=0?0:1.0/A")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(SCAN, "Passive")
}

record(ao, "BL03S-EA-FSCN-02:PVA:MaxByteRate")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(FSCN2.pva,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "BL03S-EA-FSCN-02:PVA:MaxByteRate_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(FSCN2.pva,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the last execution time of the plugin     #
###################################################################
record(ai, "BL03S-EA-FSCN-02:PVA:ExecutionTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(FSCN2.pva,0,1)EXECUTION_TIME")
    field(EGU,  "ms")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record requests that the plugin execute again with the    #
#  same NDArray                                                   #
###################################################################
record(bo, "BL03S-EA-FSCN-02:PVA:ProcessPlugin")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)PROCESS_PLUGIN")
    field(VAL,  "1")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "BL03S-EA-FSCN-02:PVA:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "BL03S-EA-FSCN-02:PVA:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


record(longout, "BL03S-EA-FSCN-02:PVA:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "BL03S-EA-FSCN-02:PVA:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-02:PVA:QueueSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)QUEUE_SIZE")
    field(PINI, "YES")
}

record(longin, "BL03S-EA-FSCN-02:PVA:QueueSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)QUEUE_SIZE")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:QueueFreeLow")
    field(SCAN, "I/O Intr")
}

record(calcout, "BL03S-EA-FSCN-02:PVA:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "BL03S-EA-FSCN-02:PVA:QueueSize")
    field(OUT,  "BL03S-EA-FSCN-02:PVA:QueueFree.LOW")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "BL03S-EA-FSCN-02:PVA:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "BL03S-EA-FSCN-02:PVA:QueueSize")
   field(OUT,  "BL03S-EA-FSCN-02:PVA:QueueUse.HIGH")
   field(FLNK, "BL03S-EA-FSCN-02:PVA:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "BL03S-EA-FSCN-02:PVA:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "BL03S-EA-FSCN-02:PVA:QueueSize")
   field(OUT,  "BL03S-EA-FSCN-02:PVA:QueueUse.HIHI")
}

record(longin, "BL03S-EA-FSCN-02:PVA:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "BL03S-EA-FSCN-02:PVA:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "BL03S-EA-FSCN-02:PVA:QueueSize")
    field(INPB, "BL03S-EA-FSCN-02:PVA:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}

record(longout, "BL03S-EA-FSCN-02:PVA:NumThreads")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)NUM_THREADS")
    field(VAL,  "1")
    field(PINI, "YES")
}

record(longin, "BL03S-EA-FSCN-02:PVA:NumThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)NUM_THREADS")
    field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:PVA:MaxThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)MAX_THREADS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control output array sorting                     #
###################################################################
record(mbbo, "BL03S-EA-FSCN-02:PVA:SortMode") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
}

record(mbbi, "BL03S-EA-FSCN-02:PVA:SortMode_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
    field(SCAN, "I/O Intr")
}

record(ao, "BL03S-EA-FSCN-02:PVA:SortTime") {
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(FSCN2.pva,0,1)SORT_TIME")
    field(PREC, "3")
    field(VAL, "0.1")
}

record(ai, "BL03S-EA-FSCN-02:PVA:SortTime_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(FSCN2.pva,0,1)SORT_TIME")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-02:PVA:SortSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)SORT_SIZE")
    field(VAL,  "20")
    field(PINI, "YES")
}

record(longin, "BL03S-EA-FSCN-02:PVA:SortSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)SORT_SIZE")
    field(FLNK, "BL03S-EA-FSCN-02:PVA:SortFreeLow")
    field(SCAN, "I/O Intr")
}

record(longin, "BL03S-EA-FSCN-02:PVA:SortFree") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)SORT_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

record(calcout, "BL03S-EA-FSCN-02:PVA:SortFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "BL03S-EA-FSCN-02:PVA:SortSize")
    field(OUT,  "BL03S-EA-FSCN-02:PVA:SortFree.LOW")
}

record(longout, "BL03S-EA-FSCN-02:PVA:DroppedOutputArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)DROPPED_OUTPUT_ARRAYS")
    field(VAL,  "0")
}

record(longin, "BL03S-EA-FSCN-02:PVA:DroppedOutputArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)DROPPED_OUTPUT_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "BL03S-EA-FSCN-02:PVA:DisorderedArrays")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(FSCN2.pva,0,1)DISORDERED_ARRAYS")
    field(PINI, "YES")
}

record(longin, "BL03S-EA-FSCN-02:PVA:DisorderedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(FSCN2.pva,0,1)DISORDERED_ARRAYS")
    field(SCAN, "I/O Intr")
}



###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default

# New records for NDPluginPva

record(waveform, "BL03S-EA-FSCN-02:PVA:PvName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(FSCN2.pva,0,1)PV_NAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}
